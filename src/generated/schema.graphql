### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateCart {
  count: Int!
}

type AggregateMenu {
  count: Int!
}

type AggregateMenuChoice {
  count: Int!
}

type AggregateMenuHeader {
  count: Int!
}

type AggregateMenuItem {
  count: Int!
}

type AggregateMenuSelection {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderItem {
  count: Int!
}

type AggregateOrganization {
  count: Int!
}

type AggregateTable {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthPayload {
  token: String
  user: User
}

type BatchPayload {
  count: Long!
}

"""Cart that the customer has created"""
type Cart {
  customer: User!
  id: ID!
  orders(after: String, before: String, first: Int, last: Int, orderBy: OrderOrderByInput, skip: Int, where: OrderWhereInput): [Order!]
  table: Table
  total: Int!
}

type CartConnection {
  aggregate: AggregateCart!
  edges: [CartEdge!]!
  pageInfo: PageInfo!
}

input CartCreateInput {
  customer: UserCreateOneWithoutCartInput!
  id: ID
  orders: OrderCreateManyInput
  table: TableCreateOneWithoutCartsInput
  total: Int!
}

input CartCreateManyWithoutTableInput {
  connect: [CartWhereUniqueInput!]
  create: [CartCreateWithoutTableInput!]
}

input CartCreateOneWithoutCustomerInput {
  connect: CartWhereUniqueInput
  create: CartCreateWithoutCustomerInput
}

input CartCreateWithoutCustomerInput {
  id: ID
  orders: OrderCreateManyInput
  table: TableCreateOneWithoutCartsInput
  total: Int!
}

input CartCreateWithoutTableInput {
  customer: UserCreateOneWithoutCartInput!
  id: ID
  orders: OrderCreateManyInput
  total: Int!
}

type CartEdge {
  cursor: String!
  node: Cart!
}

enum CartOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  total_ASC
  total_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CartScalarWhereInput {
  AND: [CartScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [CartScalarWhereInput!]
  OR: [CartScalarWhereInput!]
  total: Int
  total_gt: Int
  total_gte: Int
  total_in: [Int!]
  total_lt: Int
  total_lte: Int
  total_not: Int
  total_not_in: [Int!]
}

input CartUpdateInput {
  customer: UserUpdateOneRequiredWithoutCartInput
  orders: OrderUpdateManyInput
  table: TableUpdateOneWithoutCartsInput
  total: Int
}

input CartUpdateManyDataInput {
  total: Int
}

input CartUpdateManyMutationInput {
  total: Int
}

input CartUpdateManyWithoutTableInput {
  connect: [CartWhereUniqueInput!]
  create: [CartCreateWithoutTableInput!]
  delete: [CartWhereUniqueInput!]
  deleteMany: [CartScalarWhereInput!]
  disconnect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutTableInput!]
  updateMany: [CartUpdateManyWithWhereNestedInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutTableInput!]
}

input CartUpdateManyWithWhereNestedInput {
  data: CartUpdateManyDataInput!
  where: CartScalarWhereInput!
}

input CartUpdateOneWithoutCustomerInput {
  connect: CartWhereUniqueInput
  create: CartCreateWithoutCustomerInput
  delete: Boolean
  disconnect: Boolean
  update: CartUpdateWithoutCustomerDataInput
  upsert: CartUpsertWithoutCustomerInput
}

input CartUpdateWithoutCustomerDataInput {
  orders: OrderUpdateManyInput
  table: TableUpdateOneWithoutCartsInput
  total: Int
}

input CartUpdateWithoutTableDataInput {
  customer: UserUpdateOneRequiredWithoutCartInput
  orders: OrderUpdateManyInput
  total: Int
}

input CartUpdateWithWhereUniqueWithoutTableInput {
  data: CartUpdateWithoutTableDataInput!
  where: CartWhereUniqueInput!
}

input CartUpsertWithoutCustomerInput {
  create: CartCreateWithoutCustomerInput!
  update: CartUpdateWithoutCustomerDataInput!
}

input CartUpsertWithWhereUniqueWithoutTableInput {
  create: CartCreateWithoutTableInput!
  update: CartUpdateWithoutTableDataInput!
  where: CartWhereUniqueInput!
}

input CartWhereInput {
  AND: [CartWhereInput!]
  customer: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [CartWhereInput!]
  OR: [CartWhereInput!]
  orders_every: OrderWhereInput
  orders_none: OrderWhereInput
  orders_some: OrderWhereInput
  table: TableWhereInput
  total: Int
  total_gt: Int
  total_gte: Int
  total_in: [Int!]
  total_lt: Int
  total_lte: Int
  total_not: Int
  total_not_in: [Int!]
}

input CartWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

"""Menu that the admin has created within an organization"""
type Menu {
  createdAt: DateTime!
  id: ID!
  menuItems(after: String, before: String, first: Int, last: Int, orderBy: MenuItemOrderByInput, skip: Int, where: MenuItemWhereInput): [MenuItem!]
  organization: Organization!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

"""MenuChoice that the admin has created"""
type MenuChoice {
  header: String!
  id: ID!
  selections(after: String, before: String, first: Int, last: Int, orderBy: MenuSelectionOrderByInput, skip: Int, where: MenuSelectionWhereInput): [MenuSelection!]
  subHeader: String
}

type MenuChoiceConnection {
  aggregate: AggregateMenuChoice!
  edges: [MenuChoiceEdge!]!
  pageInfo: PageInfo!
}

input MenuChoiceCreateInput {
  header: String!
  id: ID
  selections: MenuSelectionCreateManyWithoutMenuChoiceInput
  subHeader: String
}

input MenuChoiceCreateManyInput {
  connect: [MenuChoiceWhereUniqueInput!]
  create: [MenuChoiceCreateInput!]
}

input MenuChoiceCreateOneWithoutSelectionsInput {
  connect: MenuChoiceWhereUniqueInput
  create: MenuChoiceCreateWithoutSelectionsInput
}

input MenuChoiceCreateWithoutSelectionsInput {
  header: String!
  id: ID
  subHeader: String
}

type MenuChoiceEdge {
  cursor: String!
  node: MenuChoice!
}

enum MenuChoiceOrderByInput {
  createdAt_ASC
  createdAt_DESC
  header_ASC
  header_DESC
  id_ASC
  id_DESC
  subHeader_ASC
  subHeader_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input MenuChoiceScalarWhereInput {
  AND: [MenuChoiceScalarWhereInput!]
  header: String
  header_contains: String
  header_ends_with: String
  header_gt: String
  header_gte: String
  header_in: [String!]
  header_lt: String
  header_lte: String
  header_not: String
  header_not_contains: String
  header_not_ends_with: String
  header_not_in: [String!]
  header_not_starts_with: String
  header_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [MenuChoiceScalarWhereInput!]
  OR: [MenuChoiceScalarWhereInput!]
  subHeader: String
  subHeader_contains: String
  subHeader_ends_with: String
  subHeader_gt: String
  subHeader_gte: String
  subHeader_in: [String!]
  subHeader_lt: String
  subHeader_lte: String
  subHeader_not: String
  subHeader_not_contains: String
  subHeader_not_ends_with: String
  subHeader_not_in: [String!]
  subHeader_not_starts_with: String
  subHeader_starts_with: String
}

input MenuChoiceUpdateDataInput {
  header: String
  selections: MenuSelectionUpdateManyWithoutMenuChoiceInput
  subHeader: String
}

input MenuChoiceUpdateInput {
  header: String
  selections: MenuSelectionUpdateManyWithoutMenuChoiceInput
  subHeader: String
}

input MenuChoiceUpdateManyDataInput {
  header: String
  subHeader: String
}

input MenuChoiceUpdateManyInput {
  connect: [MenuChoiceWhereUniqueInput!]
  create: [MenuChoiceCreateInput!]
  delete: [MenuChoiceWhereUniqueInput!]
  deleteMany: [MenuChoiceScalarWhereInput!]
  disconnect: [MenuChoiceWhereUniqueInput!]
  set: [MenuChoiceWhereUniqueInput!]
  update: [MenuChoiceUpdateWithWhereUniqueNestedInput!]
  updateMany: [MenuChoiceUpdateManyWithWhereNestedInput!]
  upsert: [MenuChoiceUpsertWithWhereUniqueNestedInput!]
}

input MenuChoiceUpdateManyMutationInput {
  header: String
  subHeader: String
}

input MenuChoiceUpdateManyWithWhereNestedInput {
  data: MenuChoiceUpdateManyDataInput!
  where: MenuChoiceScalarWhereInput!
}

input MenuChoiceUpdateOneWithoutSelectionsInput {
  connect: MenuChoiceWhereUniqueInput
  create: MenuChoiceCreateWithoutSelectionsInput
  delete: Boolean
  disconnect: Boolean
  update: MenuChoiceUpdateWithoutSelectionsDataInput
  upsert: MenuChoiceUpsertWithoutSelectionsInput
}

input MenuChoiceUpdateWithoutSelectionsDataInput {
  header: String
  subHeader: String
}

input MenuChoiceUpdateWithWhereUniqueNestedInput {
  data: MenuChoiceUpdateDataInput!
  where: MenuChoiceWhereUniqueInput!
}

input MenuChoiceUpsertWithoutSelectionsInput {
  create: MenuChoiceCreateWithoutSelectionsInput!
  update: MenuChoiceUpdateWithoutSelectionsDataInput!
}

input MenuChoiceUpsertWithWhereUniqueNestedInput {
  create: MenuChoiceCreateInput!
  update: MenuChoiceUpdateDataInput!
  where: MenuChoiceWhereUniqueInput!
}

input MenuChoiceWhereInput {
  AND: [MenuChoiceWhereInput!]
  header: String
  header_contains: String
  header_ends_with: String
  header_gt: String
  header_gte: String
  header_in: [String!]
  header_lt: String
  header_lte: String
  header_not: String
  header_not_contains: String
  header_not_ends_with: String
  header_not_in: [String!]
  header_not_starts_with: String
  header_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [MenuChoiceWhereInput!]
  OR: [MenuChoiceWhereInput!]
  selections_every: MenuSelectionWhereInput
  selections_none: MenuSelectionWhereInput
  selections_some: MenuSelectionWhereInput
  subHeader: String
  subHeader_contains: String
  subHeader_ends_with: String
  subHeader_gt: String
  subHeader_gte: String
  subHeader_in: [String!]
  subHeader_lt: String
  subHeader_lte: String
  subHeader_not: String
  subHeader_not_contains: String
  subHeader_not_ends_with: String
  subHeader_not_in: [String!]
  subHeader_not_starts_with: String
  subHeader_starts_with: String
}

input MenuChoiceWhereUniqueInput {
  id: ID
}

type MenuConnection {
  aggregate: AggregateMenu!
  edges: [MenuEdge!]!
  pageInfo: PageInfo!
}

input MenuCreateInput {
  id: ID
  menuItems: MenuItemCreateManyWithoutMenuInput
  organization: OrganizationCreateOneWithoutMenusInput!
  published: Boolean
  title: String!
}

input MenuCreateManyWithoutOrganizationInput {
  connect: [MenuWhereUniqueInput!]
  create: [MenuCreateWithoutOrganizationInput!]
}

input MenuCreateOneInput {
  connect: MenuWhereUniqueInput
  create: MenuCreateInput
}

input MenuCreateOneWithoutMenuItemsInput {
  connect: MenuWhereUniqueInput
  create: MenuCreateWithoutMenuItemsInput
}

input MenuCreateWithoutMenuItemsInput {
  id: ID
  organization: OrganizationCreateOneWithoutMenusInput!
  published: Boolean
  title: String!
}

input MenuCreateWithoutOrganizationInput {
  id: ID
  menuItems: MenuItemCreateManyWithoutMenuInput
  published: Boolean
  title: String!
}

type MenuEdge {
  cursor: String!
  node: Menu!
}

"""MenuHeader that the admin has created"""
type MenuHeader {
  id: ID!
  menu: Menu
  menuItems(after: String, before: String, first: Int, last: Int, orderBy: MenuItemOrderByInput, skip: Int, where: MenuItemWhereInput): [MenuItem!]
  name: String!
  subHeader: String
}

type MenuHeaderConnection {
  aggregate: AggregateMenuHeader!
  edges: [MenuHeaderEdge!]!
  pageInfo: PageInfo!
}

input MenuHeaderCreateInput {
  id: ID
  menu: MenuCreateOneInput
  menuItems: MenuItemCreateManyWithoutMenuHeaderInput
  name: String!
  subHeader: String
}

input MenuHeaderCreateOneWithoutMenuItemsInput {
  connect: MenuHeaderWhereUniqueInput
  create: MenuHeaderCreateWithoutMenuItemsInput
}

input MenuHeaderCreateWithoutMenuItemsInput {
  id: ID
  menu: MenuCreateOneInput
  name: String!
  subHeader: String
}

type MenuHeaderEdge {
  cursor: String!
  node: MenuHeader!
}

enum MenuHeaderOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  subHeader_ASC
  subHeader_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input MenuHeaderUpdateInput {
  menu: MenuUpdateOneInput
  menuItems: MenuItemUpdateManyWithoutMenuHeaderInput
  name: String
  subHeader: String
}

input MenuHeaderUpdateManyMutationInput {
  name: String
  subHeader: String
}

input MenuHeaderUpdateOneWithoutMenuItemsInput {
  connect: MenuHeaderWhereUniqueInput
  create: MenuHeaderCreateWithoutMenuItemsInput
  delete: Boolean
  disconnect: Boolean
  update: MenuHeaderUpdateWithoutMenuItemsDataInput
  upsert: MenuHeaderUpsertWithoutMenuItemsInput
}

input MenuHeaderUpdateWithoutMenuItemsDataInput {
  menu: MenuUpdateOneInput
  name: String
  subHeader: String
}

input MenuHeaderUpsertWithoutMenuItemsInput {
  create: MenuHeaderCreateWithoutMenuItemsInput!
  update: MenuHeaderUpdateWithoutMenuItemsDataInput!
}

input MenuHeaderWhereInput {
  AND: [MenuHeaderWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  menu: MenuWhereInput
  menuItems_every: MenuItemWhereInput
  menuItems_none: MenuItemWhereInput
  menuItems_some: MenuItemWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [MenuHeaderWhereInput!]
  OR: [MenuHeaderWhereInput!]
  subHeader: String
  subHeader_contains: String
  subHeader_ends_with: String
  subHeader_gt: String
  subHeader_gte: String
  subHeader_in: [String!]
  subHeader_lt: String
  subHeader_lte: String
  subHeader_not: String
  subHeader_not_contains: String
  subHeader_not_ends_with: String
  subHeader_not_in: [String!]
  subHeader_not_starts_with: String
  subHeader_starts_with: String
}

input MenuHeaderWhereUniqueInput {
  id: ID
}

"""MenuItem that the admin has created"""
type MenuItem {
  basePrice: String!
  description: String
  id: ID!
  image: String
  largeImage: String
  menu: Menu
  menuHeader: MenuHeader
  name: String!
  options(after: String, before: String, first: Int, last: Int, orderBy: MenuChoiceOrderByInput, skip: Int, where: MenuChoiceWhereInput): [MenuChoice!]
}

type MenuItemConnection {
  aggregate: AggregateMenuItem!
  edges: [MenuItemEdge!]!
  pageInfo: PageInfo!
}

input MenuItemCreateInput {
  basePrice: String!
  description: String
  id: ID
  image: String
  largeImage: String
  menu: MenuCreateOneWithoutMenuItemsInput
  menuHeader: MenuHeaderCreateOneWithoutMenuItemsInput
  name: String!
  options: MenuChoiceCreateManyInput
}

input MenuItemCreateManyWithoutMenuHeaderInput {
  connect: [MenuItemWhereUniqueInput!]
  create: [MenuItemCreateWithoutMenuHeaderInput!]
}

input MenuItemCreateManyWithoutMenuInput {
  connect: [MenuItemWhereUniqueInput!]
  create: [MenuItemCreateWithoutMenuInput!]
}

input MenuItemCreateWithoutMenuHeaderInput {
  basePrice: String!
  description: String
  id: ID
  image: String
  largeImage: String
  menu: MenuCreateOneWithoutMenuItemsInput
  name: String!
  options: MenuChoiceCreateManyInput
}

input MenuItemCreateWithoutMenuInput {
  basePrice: String!
  description: String
  id: ID
  image: String
  largeImage: String
  menuHeader: MenuHeaderCreateOneWithoutMenuItemsInput
  name: String!
  options: MenuChoiceCreateManyInput
}

type MenuItemEdge {
  cursor: String!
  node: MenuItem!
}

enum MenuItemOrderByInput {
  basePrice_ASC
  basePrice_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input MenuItemScalarWhereInput {
  AND: [MenuItemScalarWhereInput!]
  basePrice: String
  basePrice_contains: String
  basePrice_ends_with: String
  basePrice_gt: String
  basePrice_gte: String
  basePrice_in: [String!]
  basePrice_lt: String
  basePrice_lte: String
  basePrice_not: String
  basePrice_not_contains: String
  basePrice_not_ends_with: String
  basePrice_not_in: [String!]
  basePrice_not_starts_with: String
  basePrice_starts_with: String
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  image: String
  image_contains: String
  image_ends_with: String
  image_gt: String
  image_gte: String
  image_in: [String!]
  image_lt: String
  image_lte: String
  image_not: String
  image_not_contains: String
  image_not_ends_with: String
  image_not_in: [String!]
  image_not_starts_with: String
  image_starts_with: String
  largeImage: String
  largeImage_contains: String
  largeImage_ends_with: String
  largeImage_gt: String
  largeImage_gte: String
  largeImage_in: [String!]
  largeImage_lt: String
  largeImage_lte: String
  largeImage_not: String
  largeImage_not_contains: String
  largeImage_not_ends_with: String
  largeImage_not_in: [String!]
  largeImage_not_starts_with: String
  largeImage_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [MenuItemScalarWhereInput!]
  OR: [MenuItemScalarWhereInput!]
}

input MenuItemUpdateInput {
  basePrice: String
  description: String
  image: String
  largeImage: String
  menu: MenuUpdateOneWithoutMenuItemsInput
  menuHeader: MenuHeaderUpdateOneWithoutMenuItemsInput
  name: String
  options: MenuChoiceUpdateManyInput
}

input MenuItemUpdateManyDataInput {
  basePrice: String
  description: String
  image: String
  largeImage: String
  name: String
}

input MenuItemUpdateManyMutationInput {
  basePrice: String
  description: String
  image: String
  largeImage: String
  name: String
}

input MenuItemUpdateManyWithoutMenuHeaderInput {
  connect: [MenuItemWhereUniqueInput!]
  create: [MenuItemCreateWithoutMenuHeaderInput!]
  delete: [MenuItemWhereUniqueInput!]
  deleteMany: [MenuItemScalarWhereInput!]
  disconnect: [MenuItemWhereUniqueInput!]
  set: [MenuItemWhereUniqueInput!]
  update: [MenuItemUpdateWithWhereUniqueWithoutMenuHeaderInput!]
  updateMany: [MenuItemUpdateManyWithWhereNestedInput!]
  upsert: [MenuItemUpsertWithWhereUniqueWithoutMenuHeaderInput!]
}

input MenuItemUpdateManyWithoutMenuInput {
  connect: [MenuItemWhereUniqueInput!]
  create: [MenuItemCreateWithoutMenuInput!]
  delete: [MenuItemWhereUniqueInput!]
  deleteMany: [MenuItemScalarWhereInput!]
  disconnect: [MenuItemWhereUniqueInput!]
  set: [MenuItemWhereUniqueInput!]
  update: [MenuItemUpdateWithWhereUniqueWithoutMenuInput!]
  updateMany: [MenuItemUpdateManyWithWhereNestedInput!]
  upsert: [MenuItemUpsertWithWhereUniqueWithoutMenuInput!]
}

input MenuItemUpdateManyWithWhereNestedInput {
  data: MenuItemUpdateManyDataInput!
  where: MenuItemScalarWhereInput!
}

input MenuItemUpdateWithoutMenuDataInput {
  basePrice: String
  description: String
  image: String
  largeImage: String
  menuHeader: MenuHeaderUpdateOneWithoutMenuItemsInput
  name: String
  options: MenuChoiceUpdateManyInput
}

input MenuItemUpdateWithoutMenuHeaderDataInput {
  basePrice: String
  description: String
  image: String
  largeImage: String
  menu: MenuUpdateOneWithoutMenuItemsInput
  name: String
  options: MenuChoiceUpdateManyInput
}

input MenuItemUpdateWithWhereUniqueWithoutMenuHeaderInput {
  data: MenuItemUpdateWithoutMenuHeaderDataInput!
  where: MenuItemWhereUniqueInput!
}

input MenuItemUpdateWithWhereUniqueWithoutMenuInput {
  data: MenuItemUpdateWithoutMenuDataInput!
  where: MenuItemWhereUniqueInput!
}

input MenuItemUpsertWithWhereUniqueWithoutMenuHeaderInput {
  create: MenuItemCreateWithoutMenuHeaderInput!
  update: MenuItemUpdateWithoutMenuHeaderDataInput!
  where: MenuItemWhereUniqueInput!
}

input MenuItemUpsertWithWhereUniqueWithoutMenuInput {
  create: MenuItemCreateWithoutMenuInput!
  update: MenuItemUpdateWithoutMenuDataInput!
  where: MenuItemWhereUniqueInput!
}

input MenuItemWhereInput {
  AND: [MenuItemWhereInput!]
  basePrice: String
  basePrice_contains: String
  basePrice_ends_with: String
  basePrice_gt: String
  basePrice_gte: String
  basePrice_in: [String!]
  basePrice_lt: String
  basePrice_lte: String
  basePrice_not: String
  basePrice_not_contains: String
  basePrice_not_ends_with: String
  basePrice_not_in: [String!]
  basePrice_not_starts_with: String
  basePrice_starts_with: String
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  image: String
  image_contains: String
  image_ends_with: String
  image_gt: String
  image_gte: String
  image_in: [String!]
  image_lt: String
  image_lte: String
  image_not: String
  image_not_contains: String
  image_not_ends_with: String
  image_not_in: [String!]
  image_not_starts_with: String
  image_starts_with: String
  largeImage: String
  largeImage_contains: String
  largeImage_ends_with: String
  largeImage_gt: String
  largeImage_gte: String
  largeImage_in: [String!]
  largeImage_lt: String
  largeImage_lte: String
  largeImage_not: String
  largeImage_not_contains: String
  largeImage_not_ends_with: String
  largeImage_not_in: [String!]
  largeImage_not_starts_with: String
  largeImage_starts_with: String
  menu: MenuWhereInput
  menuHeader: MenuHeaderWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [MenuItemWhereInput!]
  options_every: MenuChoiceWhereInput
  options_none: MenuChoiceWhereInput
  options_some: MenuChoiceWhereInput
  OR: [MenuItemWhereInput!]
}

input MenuItemWhereUniqueInput {
  id: ID
}

enum MenuOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  published_ASC
  published_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input MenuScalarWhereInput {
  AND: [MenuScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [MenuScalarWhereInput!]
  OR: [MenuScalarWhereInput!]
  published: Boolean
  published_not: Boolean
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

"""MenuSelection that the admin has created"""
type MenuSelection {
  id: ID!
  menuChoice: MenuChoice
  name: String!
  selected: Boolean
  valueAdd: String
}

type MenuSelectionConnection {
  aggregate: AggregateMenuSelection!
  edges: [MenuSelectionEdge!]!
  pageInfo: PageInfo!
}

input MenuSelectionCreateInput {
  id: ID
  menuChoice: MenuChoiceCreateOneWithoutSelectionsInput
  name: String!
  selected: Boolean
  valueAdd: String
}

input MenuSelectionCreateManyWithoutMenuChoiceInput {
  connect: [MenuSelectionWhereUniqueInput!]
  create: [MenuSelectionCreateWithoutMenuChoiceInput!]
}

input MenuSelectionCreateWithoutMenuChoiceInput {
  id: ID
  name: String!
  selected: Boolean
  valueAdd: String
}

type MenuSelectionEdge {
  cursor: String!
  node: MenuSelection!
}

enum MenuSelectionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  selected_ASC
  selected_DESC
  updatedAt_ASC
  updatedAt_DESC
  valueAdd_ASC
  valueAdd_DESC
}

input MenuSelectionScalarWhereInput {
  AND: [MenuSelectionScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [MenuSelectionScalarWhereInput!]
  OR: [MenuSelectionScalarWhereInput!]
  selected: Boolean
  selected_not: Boolean
  valueAdd: String
  valueAdd_contains: String
  valueAdd_ends_with: String
  valueAdd_gt: String
  valueAdd_gte: String
  valueAdd_in: [String!]
  valueAdd_lt: String
  valueAdd_lte: String
  valueAdd_not: String
  valueAdd_not_contains: String
  valueAdd_not_ends_with: String
  valueAdd_not_in: [String!]
  valueAdd_not_starts_with: String
  valueAdd_starts_with: String
}

input MenuSelectionUpdateInput {
  menuChoice: MenuChoiceUpdateOneWithoutSelectionsInput
  name: String
  selected: Boolean
  valueAdd: String
}

input MenuSelectionUpdateManyDataInput {
  name: String
  selected: Boolean
  valueAdd: String
}

input MenuSelectionUpdateManyMutationInput {
  name: String
  selected: Boolean
  valueAdd: String
}

input MenuSelectionUpdateManyWithoutMenuChoiceInput {
  connect: [MenuSelectionWhereUniqueInput!]
  create: [MenuSelectionCreateWithoutMenuChoiceInput!]
  delete: [MenuSelectionWhereUniqueInput!]
  deleteMany: [MenuSelectionScalarWhereInput!]
  disconnect: [MenuSelectionWhereUniqueInput!]
  set: [MenuSelectionWhereUniqueInput!]
  update: [MenuSelectionUpdateWithWhereUniqueWithoutMenuChoiceInput!]
  updateMany: [MenuSelectionUpdateManyWithWhereNestedInput!]
  upsert: [MenuSelectionUpsertWithWhereUniqueWithoutMenuChoiceInput!]
}

input MenuSelectionUpdateManyWithWhereNestedInput {
  data: MenuSelectionUpdateManyDataInput!
  where: MenuSelectionScalarWhereInput!
}

input MenuSelectionUpdateWithoutMenuChoiceDataInput {
  name: String
  selected: Boolean
  valueAdd: String
}

input MenuSelectionUpdateWithWhereUniqueWithoutMenuChoiceInput {
  data: MenuSelectionUpdateWithoutMenuChoiceDataInput!
  where: MenuSelectionWhereUniqueInput!
}

input MenuSelectionUpsertWithWhereUniqueWithoutMenuChoiceInput {
  create: MenuSelectionCreateWithoutMenuChoiceInput!
  update: MenuSelectionUpdateWithoutMenuChoiceDataInput!
  where: MenuSelectionWhereUniqueInput!
}

input MenuSelectionWhereInput {
  AND: [MenuSelectionWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  menuChoice: MenuChoiceWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [MenuSelectionWhereInput!]
  OR: [MenuSelectionWhereInput!]
  selected: Boolean
  selected_not: Boolean
  valueAdd: String
  valueAdd_contains: String
  valueAdd_ends_with: String
  valueAdd_gt: String
  valueAdd_gte: String
  valueAdd_in: [String!]
  valueAdd_lt: String
  valueAdd_lte: String
  valueAdd_not: String
  valueAdd_not_contains: String
  valueAdd_not_ends_with: String
  valueAdd_not_in: [String!]
  valueAdd_not_starts_with: String
  valueAdd_starts_with: String
}

input MenuSelectionWhereUniqueInput {
  id: ID
}

input MenuUpdateDataInput {
  menuItems: MenuItemUpdateManyWithoutMenuInput
  organization: OrganizationUpdateOneRequiredWithoutMenusInput
  published: Boolean
  title: String
}

input MenuUpdateInput {
  menuItems: MenuItemUpdateManyWithoutMenuInput
  organization: OrganizationUpdateOneRequiredWithoutMenusInput
  published: Boolean
  title: String
}

input MenuUpdateManyDataInput {
  published: Boolean
  title: String
}

input MenuUpdateManyMutationInput {
  published: Boolean
  title: String
}

input MenuUpdateManyWithoutOrganizationInput {
  connect: [MenuWhereUniqueInput!]
  create: [MenuCreateWithoutOrganizationInput!]
  delete: [MenuWhereUniqueInput!]
  deleteMany: [MenuScalarWhereInput!]
  disconnect: [MenuWhereUniqueInput!]
  set: [MenuWhereUniqueInput!]
  update: [MenuUpdateWithWhereUniqueWithoutOrganizationInput!]
  updateMany: [MenuUpdateManyWithWhereNestedInput!]
  upsert: [MenuUpsertWithWhereUniqueWithoutOrganizationInput!]
}

input MenuUpdateManyWithWhereNestedInput {
  data: MenuUpdateManyDataInput!
  where: MenuScalarWhereInput!
}

input MenuUpdateOneInput {
  connect: MenuWhereUniqueInput
  create: MenuCreateInput
  delete: Boolean
  disconnect: Boolean
  update: MenuUpdateDataInput
  upsert: MenuUpsertNestedInput
}

input MenuUpdateOneWithoutMenuItemsInput {
  connect: MenuWhereUniqueInput
  create: MenuCreateWithoutMenuItemsInput
  delete: Boolean
  disconnect: Boolean
  update: MenuUpdateWithoutMenuItemsDataInput
  upsert: MenuUpsertWithoutMenuItemsInput
}

input MenuUpdateWithoutMenuItemsDataInput {
  organization: OrganizationUpdateOneRequiredWithoutMenusInput
  published: Boolean
  title: String
}

input MenuUpdateWithoutOrganizationDataInput {
  menuItems: MenuItemUpdateManyWithoutMenuInput
  published: Boolean
  title: String
}

input MenuUpdateWithWhereUniqueWithoutOrganizationInput {
  data: MenuUpdateWithoutOrganizationDataInput!
  where: MenuWhereUniqueInput!
}

input MenuUpsertNestedInput {
  create: MenuCreateInput!
  update: MenuUpdateDataInput!
}

input MenuUpsertWithoutMenuItemsInput {
  create: MenuCreateWithoutMenuItemsInput!
  update: MenuUpdateWithoutMenuItemsDataInput!
}

input MenuUpsertWithWhereUniqueWithoutOrganizationInput {
  create: MenuCreateWithoutOrganizationInput!
  update: MenuUpdateWithoutOrganizationDataInput!
  where: MenuWhereUniqueInput!
}

input MenuWhereInput {
  AND: [MenuWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  menuItems_every: MenuItemWhereInput
  menuItems_none: MenuItemWhereInput
  menuItems_some: MenuItemWhereInput
  NOT: [MenuWhereInput!]
  OR: [MenuWhereInput!]
  organization: OrganizationWhereInput
  published: Boolean
  published_not: Boolean
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input MenuWhereUniqueInput {
  id: ID
}

type Mutation {
  createCart(data: CartCreateInput!): Cart!
  createMenu(data: MenuCreateInput!): Menu!
  createMenuChoice(data: MenuChoiceCreateInput!): MenuChoice!
  createMenuHeader(data: MenuHeaderCreateInput!): MenuHeader!
  createMenuItem(data: MenuItemCreateInput!): MenuItem!
  createMenuSelection(data: MenuSelectionCreateInput!): MenuSelection!
  createOrder(data: OrderCreateInput!): Order!
  createOrderItem(data: OrderItemCreateInput!): OrderItem!
  createOrganization(data: OrganizationCreateInput!): Organization!
  createTable(data: TableCreateInput!): Table!
  createUser(data: UserCreateInput!): User!
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteManyCarts(where: CartWhereInput): BatchPayload!
  deleteManyMenuChoices(where: MenuChoiceWhereInput): BatchPayload!
  deleteManyMenuHeaders(where: MenuHeaderWhereInput): BatchPayload!
  deleteManyMenuItems(where: MenuItemWhereInput): BatchPayload!
  deleteManyMenus(where: MenuWhereInput): BatchPayload!
  deleteManyMenuSelections(where: MenuSelectionWhereInput): BatchPayload!
  deleteManyOrderItems(where: OrderItemWhereInput): BatchPayload!
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  deleteManyOrganizations(where: OrganizationWhereInput): BatchPayload!
  deleteManyTables(where: TableWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteMenu(where: MenuWhereUniqueInput!): Menu
  deleteMenuChoice(where: MenuChoiceWhereUniqueInput!): MenuChoice
  deleteMenuHeader(where: MenuHeaderWhereUniqueInput!): MenuHeader
  deleteMenuItem(where: MenuItemWhereUniqueInput!): MenuItem
  deleteMenuSelection(where: MenuSelectionWhereUniqueInput!): MenuSelection
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteTable(where: TableWhereUniqueInput!): Table
  deleteUser(where: UserWhereUniqueInput!): User
  loginUser(email: String!, password: String!): AuthPayload
  registerUser(email: String!, name: String, password: String!): AuthPayload
  updateCart(data: CartUpdateInput!, where: CartWhereUniqueInput!): Cart
  updateManyCarts(data: CartUpdateManyMutationInput!, where: CartWhereInput): BatchPayload!
  updateManyMenuChoices(data: MenuChoiceUpdateManyMutationInput!, where: MenuChoiceWhereInput): BatchPayload!
  updateManyMenuHeaders(data: MenuHeaderUpdateManyMutationInput!, where: MenuHeaderWhereInput): BatchPayload!
  updateManyMenuItems(data: MenuItemUpdateManyMutationInput!, where: MenuItemWhereInput): BatchPayload!
  updateManyMenus(data: MenuUpdateManyMutationInput!, where: MenuWhereInput): BatchPayload!
  updateManyMenuSelections(data: MenuSelectionUpdateManyMutationInput!, where: MenuSelectionWhereInput): BatchPayload!
  updateManyOrderItems(data: OrderItemUpdateManyMutationInput!, where: OrderItemWhereInput): BatchPayload!
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  updateManyOrganizations(data: OrganizationUpdateManyMutationInput!, where: OrganizationWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateMenu(data: MenuUpdateInput!, where: MenuWhereUniqueInput!): Menu
  updateMenuChoice(data: MenuChoiceUpdateInput!, where: MenuChoiceWhereUniqueInput!): MenuChoice
  updateMenuHeader(data: MenuHeaderUpdateInput!, where: MenuHeaderWhereUniqueInput!): MenuHeader
  updateMenuItem(data: MenuItemUpdateInput!, where: MenuItemWhereUniqueInput!): MenuItem
  updateMenuSelection(data: MenuSelectionUpdateInput!, where: MenuSelectionWhereUniqueInput!): MenuSelection
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateOrderItem(data: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem
  updateOrganization(data: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization
  updateTable(data: TableUpdateInput!, where: TableWhereUniqueInput!): Table
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertCart(create: CartCreateInput!, update: CartUpdateInput!, where: CartWhereUniqueInput!): Cart!
  upsertMenu(create: MenuCreateInput!, update: MenuUpdateInput!, where: MenuWhereUniqueInput!): Menu!
  upsertMenuChoice(create: MenuChoiceCreateInput!, update: MenuChoiceUpdateInput!, where: MenuChoiceWhereUniqueInput!): MenuChoice!
  upsertMenuHeader(create: MenuHeaderCreateInput!, update: MenuHeaderUpdateInput!, where: MenuHeaderWhereUniqueInput!): MenuHeader!
  upsertMenuItem(create: MenuItemCreateInput!, update: MenuItemUpdateInput!, where: MenuItemWhereUniqueInput!): MenuItem!
  upsertMenuSelection(create: MenuSelectionCreateInput!, update: MenuSelectionUpdateInput!, where: MenuSelectionWhereUniqueInput!): MenuSelection!
  upsertOrder(create: OrderCreateInput!, update: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order!
  upsertOrderItem(create: OrderItemCreateInput!, update: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem!
  upsertOrganization(create: OrganizationCreateInput!, update: OrganizationUpdateInput!, where: OrganizationWhereUniqueInput!): Organization!
  upsertTable(create: TableCreateInput!, update: TableUpdateInput!, where: TableWhereUniqueInput!): Table!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

"""Order that the customer has created"""
type Order {
  charge: String!
  createdAt: DateTime!
  customer: User!
  id: ID!
  items(after: String, before: String, first: Int, last: Int, orderBy: OrderItemOrderByInput, skip: Int, where: OrderItemWhereInput): [OrderItem!]
  total: Int!
  updatedAt: DateTime!
}

type OrderConnection {
  aggregate: AggregateOrder!
  edges: [OrderEdge!]!
  pageInfo: PageInfo!
}

input OrderCreateInput {
  charge: String!
  customer: UserCreateOneWithoutOrdersInput!
  id: ID
  items: OrderItemCreateManyInput
  total: Int!
}

input OrderCreateManyInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
}

input OrderCreateManyWithoutCustomerInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutCustomerInput!]
}

input OrderCreateWithoutCustomerInput {
  charge: String!
  id: ID
  items: OrderItemCreateManyInput
  total: Int!
}

type OrderEdge {
  cursor: String!
  node: Order!
}

"""OrderItem that the customer has created"""
type OrderItem {
  customer: User!
  id: ID!
  price: Int!
  quantity: Int!
  title: String!
}

type OrderItemConnection {
  aggregate: AggregateOrderItem!
  edges: [OrderItemEdge!]!
  pageInfo: PageInfo!
}

input OrderItemCreateInput {
  customer: UserCreateOneInput!
  id: ID
  price: Int!
  quantity: Int
  title: String!
}

input OrderItemCreateManyInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateInput!]
}

type OrderItemEdge {
  cursor: String!
  node: OrderItem!
}

enum OrderItemOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  quantity_ASC
  quantity_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OrderItemScalarWhereInput {
  AND: [OrderItemScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [OrderItemScalarWhereInput!]
  OR: [OrderItemScalarWhereInput!]
  price: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_not: Int
  price_not_in: [Int!]
  quantity: Int
  quantity_gt: Int
  quantity_gte: Int
  quantity_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_not: Int
  quantity_not_in: [Int!]
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
}

input OrderItemUpdateDataInput {
  customer: UserUpdateOneRequiredInput
  price: Int
  quantity: Int
  title: String
}

input OrderItemUpdateInput {
  customer: UserUpdateOneRequiredInput
  price: Int
  quantity: Int
  title: String
}

input OrderItemUpdateManyDataInput {
  price: Int
  quantity: Int
  title: String
}

input OrderItemUpdateManyInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateInput!]
  delete: [OrderItemWhereUniqueInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueNestedInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
  upsert: [OrderItemUpsertWithWhereUniqueNestedInput!]
}

input OrderItemUpdateManyMutationInput {
  price: Int
  quantity: Int
  title: String
}

input OrderItemUpdateManyWithWhereNestedInput {
  data: OrderItemUpdateManyDataInput!
  where: OrderItemScalarWhereInput!
}

input OrderItemUpdateWithWhereUniqueNestedInput {
  data: OrderItemUpdateDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemUpsertWithWhereUniqueNestedInput {
  create: OrderItemCreateInput!
  update: OrderItemUpdateDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  customer: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  price: Int
  price_gt: Int
  price_gte: Int
  price_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_not: Int
  price_not_in: [Int!]
  quantity: Int
  quantity_gt: Int
  quantity_gte: Int
  quantity_in: [Int!]
  quantity_lt: Int
  quantity_lte: Int
  quantity_not: Int
  quantity_not_in: [Int!]
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
}

input OrderItemWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  charge_ASC
  charge_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  total_ASC
  total_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput!]
  charge: String
  charge_contains: String
  charge_ends_with: String
  charge_gt: String
  charge_gte: String
  charge_in: [String!]
  charge_lt: String
  charge_lte: String
  charge_not: String
  charge_not_contains: String
  charge_not_ends_with: String
  charge_not_in: [String!]
  charge_not_starts_with: String
  charge_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  total: Int
  total_gt: Int
  total_gte: Int
  total_in: [Int!]
  total_lt: Int
  total_lte: Int
  total_not: Int
  total_not_in: [Int!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input OrderUpdateDataInput {
  charge: String
  customer: UserUpdateOneRequiredWithoutOrdersInput
  items: OrderItemUpdateManyInput
  total: Int
}

input OrderUpdateInput {
  charge: String
  customer: UserUpdateOneRequiredWithoutOrdersInput
  items: OrderItemUpdateManyInput
  total: Int
}

input OrderUpdateManyDataInput {
  charge: String
  total: Int
}

input OrderUpdateManyInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueNestedInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  upsert: [OrderUpsertWithWhereUniqueNestedInput!]
}

input OrderUpdateManyMutationInput {
  charge: String
  total: Int
}

input OrderUpdateManyWithoutCustomerInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutCustomerInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCustomerInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  data: OrderUpdateManyDataInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateWithoutCustomerDataInput {
  charge: String
  items: OrderItemUpdateManyInput
  total: Int
}

input OrderUpdateWithWhereUniqueNestedInput {
  data: OrderUpdateDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithWhereUniqueWithoutCustomerInput {
  data: OrderUpdateWithoutCustomerDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithWhereUniqueNestedInput {
  create: OrderCreateInput!
  update: OrderUpdateDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithWhereUniqueWithoutCustomerInput {
  create: OrderCreateWithoutCustomerInput!
  update: OrderUpdateWithoutCustomerDataInput!
  where: OrderWhereUniqueInput!
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  charge: String
  charge_contains: String
  charge_ends_with: String
  charge_gt: String
  charge_gte: String
  charge_in: [String!]
  charge_lt: String
  charge_lte: String
  charge_not: String
  charge_not_contains: String
  charge_not_ends_with: String
  charge_not_in: [String!]
  charge_not_starts_with: String
  charge_starts_with: String
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  customer: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  items_every: OrderItemWhereInput
  items_none: OrderItemWhereInput
  items_some: OrderItemWhereInput
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  total: Int
  total_gt: Int
  total_gte: Int
  total_in: [Int!]
  total_lt: Int
  total_lte: Int
  total_not: Int
  total_not_in: [Int!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input OrderWhereUniqueInput {
  id: ID
}

"""Organization that the owner has created"""
type Organization {
  id: ID!
  menus(after: String, before: String, first: Int, last: Int, orderBy: MenuOrderByInput, skip: Int, where: MenuWhereInput): [Menu!]
  name: String!
  owner: User!
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
}

type OrganizationConnection {
  aggregate: AggregateOrganization!
  edges: [OrganizationEdge!]!
  pageInfo: PageInfo!
}

input OrganizationCreateInput {
  id: ID
  menus: MenuCreateManyWithoutOrganizationInput
  name: String!
  owner: UserCreateOneInput!
  users: UserCreateManyInput
}

input OrganizationCreateManyInput {
  connect: [OrganizationWhereUniqueInput!]
  create: [OrganizationCreateInput!]
}

input OrganizationCreateOneWithoutMenusInput {
  connect: OrganizationWhereUniqueInput
  create: OrganizationCreateWithoutMenusInput
}

input OrganizationCreateWithoutMenusInput {
  id: ID
  name: String!
  owner: UserCreateOneInput!
  users: UserCreateManyInput
}

type OrganizationEdge {
  cursor: String!
  node: Organization!
}

enum OrganizationOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OrganizationScalarWhereInput {
  AND: [OrganizationScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [OrganizationScalarWhereInput!]
  OR: [OrganizationScalarWhereInput!]
}

input OrganizationUpdateDataInput {
  menus: MenuUpdateManyWithoutOrganizationInput
  name: String
  owner: UserUpdateOneRequiredInput
  users: UserUpdateManyInput
}

input OrganizationUpdateInput {
  menus: MenuUpdateManyWithoutOrganizationInput
  name: String
  owner: UserUpdateOneRequiredInput
  users: UserUpdateManyInput
}

input OrganizationUpdateManyDataInput {
  name: String
}

input OrganizationUpdateManyInput {
  connect: [OrganizationWhereUniqueInput!]
  create: [OrganizationCreateInput!]
  delete: [OrganizationWhereUniqueInput!]
  deleteMany: [OrganizationScalarWhereInput!]
  disconnect: [OrganizationWhereUniqueInput!]
  set: [OrganizationWhereUniqueInput!]
  update: [OrganizationUpdateWithWhereUniqueNestedInput!]
  updateMany: [OrganizationUpdateManyWithWhereNestedInput!]
  upsert: [OrganizationUpsertWithWhereUniqueNestedInput!]
}

input OrganizationUpdateManyMutationInput {
  name: String
}

input OrganizationUpdateManyWithWhereNestedInput {
  data: OrganizationUpdateManyDataInput!
  where: OrganizationScalarWhereInput!
}

input OrganizationUpdateOneRequiredWithoutMenusInput {
  connect: OrganizationWhereUniqueInput
  create: OrganizationCreateWithoutMenusInput
  update: OrganizationUpdateWithoutMenusDataInput
  upsert: OrganizationUpsertWithoutMenusInput
}

input OrganizationUpdateWithoutMenusDataInput {
  name: String
  owner: UserUpdateOneRequiredInput
  users: UserUpdateManyInput
}

input OrganizationUpdateWithWhereUniqueNestedInput {
  data: OrganizationUpdateDataInput!
  where: OrganizationWhereUniqueInput!
}

input OrganizationUpsertWithoutMenusInput {
  create: OrganizationCreateWithoutMenusInput!
  update: OrganizationUpdateWithoutMenusDataInput!
}

input OrganizationUpsertWithWhereUniqueNestedInput {
  create: OrganizationCreateInput!
  update: OrganizationUpdateDataInput!
  where: OrganizationWhereUniqueInput!
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  menus_every: MenuWhereInput
  menus_none: MenuWhereInput
  menus_some: MenuWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  owner: UserWhereInput
  users_every: UserWhereInput
  users_none: UserWhereInput
  users_some: UserWhereInput
}

input OrganizationWhereUniqueInput {
  id: ID
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

enum Permission {
  ADMIN
  CUSTOMER
  OWNER
}

type Query {
  cart(where: CartWhereUniqueInput!): Cart
  carts(after: String, before: String, first: Int, last: Int, orderBy: CartOrderByInput, skip: Int, where: CartWhereInput): [Cart!]!
  cartsConnection(after: String, before: String, first: Int, last: Int, orderBy: CartOrderByInput, skip: Int, where: CartWhereInput): CartConnection!
  me: User
  menu(where: MenuWhereUniqueInput!): Menu
  menuChoice(where: MenuChoiceWhereUniqueInput!): MenuChoice
  menuChoices(after: String, before: String, first: Int, last: Int, orderBy: MenuChoiceOrderByInput, skip: Int, where: MenuChoiceWhereInput): [MenuChoice!]!
  menuChoicesConnection(after: String, before: String, first: Int, last: Int, orderBy: MenuChoiceOrderByInput, skip: Int, where: MenuChoiceWhereInput): MenuChoiceConnection!
  menuHeader(where: MenuHeaderWhereUniqueInput!): MenuHeader
  menuHeaders(after: String, before: String, first: Int, last: Int, orderBy: MenuHeaderOrderByInput, skip: Int, where: MenuHeaderWhereInput): [MenuHeader!]!
  menuHeadersConnection(after: String, before: String, first: Int, last: Int, orderBy: MenuHeaderOrderByInput, skip: Int, where: MenuHeaderWhereInput): MenuHeaderConnection!
  menuItem(where: MenuItemWhereUniqueInput!): MenuItem
  menuItems(after: String, before: String, first: Int, last: Int, orderBy: MenuItemOrderByInput, skip: Int, where: MenuItemWhereInput): [MenuItem!]!
  menuItemsConnection(after: String, before: String, first: Int, last: Int, orderBy: MenuItemOrderByInput, skip: Int, where: MenuItemWhereInput): MenuItemConnection!
  menus(after: String, before: String, first: Int, last: Int, orderBy: MenuOrderByInput, skip: Int, where: MenuWhereInput): [Menu!]!
  menusConnection(after: String, before: String, first: Int, last: Int, orderBy: MenuOrderByInput, skip: Int, where: MenuWhereInput): MenuConnection!
  menuSelection(where: MenuSelectionWhereUniqueInput!): MenuSelection
  menuSelections(after: String, before: String, first: Int, last: Int, orderBy: MenuSelectionOrderByInput, skip: Int, where: MenuSelectionWhereInput): [MenuSelection!]!
  menuSelectionsConnection(after: String, before: String, first: Int, last: Int, orderBy: MenuSelectionOrderByInput, skip: Int, where: MenuSelectionWhereInput): MenuSelectionConnection!
  order(where: OrderWhereUniqueInput!): Order
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItems(after: String, before: String, first: Int, last: Int, orderBy: OrderItemOrderByInput, skip: Int, where: OrderItemWhereInput): [OrderItem!]!
  orderItemsConnection(after: String, before: String, first: Int, last: Int, orderBy: OrderItemOrderByInput, skip: Int, where: OrderItemWhereInput): OrderItemConnection!
  orders(after: String, before: String, first: Int, last: Int, orderBy: OrderOrderByInput, skip: Int, where: OrderWhereInput): [Order!]!
  ordersConnection(after: String, before: String, first: Int, last: Int, orderBy: OrderOrderByInput, skip: Int, where: OrderWhereInput): OrderConnection!
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizations(after: String, before: String, first: Int, last: Int, orderBy: OrganizationOrderByInput, skip: Int, where: OrganizationWhereInput): [Organization!]!
  organizationsConnection(after: String, before: String, first: Int, last: Int, orderBy: OrganizationOrderByInput, skip: Int, where: OrganizationWhereInput): OrganizationConnection!
  table(where: TableWhereUniqueInput!): Table
  tables(after: String, before: String, first: Int, last: Int, orderBy: TableOrderByInput, skip: Int, where: TableWhereInput): [Table!]!
  tablesConnection(after: String, before: String, first: Int, last: Int, orderBy: TableOrderByInput, skip: Int, where: TableWhereInput): TableConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

"""Table that the customer has created"""
type Table {
  carts(after: String, before: String, first: Int, last: Int, orderBy: CartOrderByInput, skip: Int, where: CartWhereInput): [Cart!]
  customers(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]
  id: ID!
}

type TableConnection {
  aggregate: AggregateTable!
  edges: [TableEdge!]!
  pageInfo: PageInfo!
}

input TableCreateInput {
  carts: CartCreateManyWithoutTableInput
  customers: UserCreateManyWithoutTableInput
  id: ID
}

input TableCreateOneWithoutCartsInput {
  connect: TableWhereUniqueInput
  create: TableCreateWithoutCartsInput
}

input TableCreateOneWithoutCustomersInput {
  connect: TableWhereUniqueInput
  create: TableCreateWithoutCustomersInput
}

input TableCreateWithoutCartsInput {
  customers: UserCreateManyWithoutTableInput
  id: ID
}

input TableCreateWithoutCustomersInput {
  carts: CartCreateManyWithoutTableInput
  id: ID
}

type TableEdge {
  cursor: String!
  node: Table!
}

enum TableOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TableUpdateInput {
  carts: CartUpdateManyWithoutTableInput
  customers: UserUpdateManyWithoutTableInput
}

input TableUpdateOneWithoutCartsInput {
  connect: TableWhereUniqueInput
  create: TableCreateWithoutCartsInput
  delete: Boolean
  disconnect: Boolean
  update: TableUpdateWithoutCartsDataInput
  upsert: TableUpsertWithoutCartsInput
}

input TableUpdateOneWithoutCustomersInput {
  connect: TableWhereUniqueInput
  create: TableCreateWithoutCustomersInput
  delete: Boolean
  disconnect: Boolean
  update: TableUpdateWithoutCustomersDataInput
  upsert: TableUpsertWithoutCustomersInput
}

input TableUpdateWithoutCartsDataInput {
  customers: UserUpdateManyWithoutTableInput
}

input TableUpdateWithoutCustomersDataInput {
  carts: CartUpdateManyWithoutTableInput
}

input TableUpsertWithoutCartsInput {
  create: TableCreateWithoutCartsInput!
  update: TableUpdateWithoutCartsDataInput!
}

input TableUpsertWithoutCustomersInput {
  create: TableCreateWithoutCustomersInput!
  update: TableUpdateWithoutCustomersDataInput!
}

input TableWhereInput {
  AND: [TableWhereInput!]
  carts_every: CartWhereInput
  carts_none: CartWhereInput
  carts_some: CartWhereInput
  customers_every: UserWhereInput
  customers_none: UserWhereInput
  customers_some: UserWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [TableWhereInput!]
  OR: [TableWhereInput!]
}

input TableWhereUniqueInput {
  id: ID
}

"""The user of the application"""
type User {
  cart: Cart
  email: String!
  id: ID!
  name: String
  orders(after: String, before: String, first: Int, last: Int, orderBy: OrderOrderByInput, skip: Int, where: OrderWhereInput): [Order!]
  organizations(after: String, before: String, first: Int, last: Int, orderBy: OrganizationOrderByInput, skip: Int, where: OrganizationWhereInput): [Organization!]
  password: String!
  permissions: Permission
  resetToken: String
  resetTokenExpiry: Float
  table: Table
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  cart: CartCreateOneWithoutCustomerInput
  email: String!
  id: ID
  name: String
  orders: OrderCreateManyWithoutCustomerInput
  organizations: OrganizationCreateManyInput
  password: String!
  permissions: Permission
  resetToken: String
  resetTokenExpiry: Float
  table: TableCreateOneWithoutCustomersInput
}

input UserCreateManyInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
}

input UserCreateManyWithoutTableInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTableInput!]
}

input UserCreateOneInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
}

input UserCreateOneWithoutCartInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCartInput
}

input UserCreateOneWithoutOrdersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOrdersInput
}

input UserCreateWithoutCartInput {
  email: String!
  id: ID
  name: String
  orders: OrderCreateManyWithoutCustomerInput
  organizations: OrganizationCreateManyInput
  password: String!
  permissions: Permission
  resetToken: String
  resetTokenExpiry: Float
  table: TableCreateOneWithoutCustomersInput
}

input UserCreateWithoutOrdersInput {
  cart: CartCreateOneWithoutCustomerInput
  email: String!
  id: ID
  name: String
  organizations: OrganizationCreateManyInput
  password: String!
  permissions: Permission
  resetToken: String
  resetTokenExpiry: Float
  table: TableCreateOneWithoutCustomersInput
}

input UserCreateWithoutTableInput {
  cart: CartCreateOneWithoutCustomerInput
  email: String!
  id: ID
  name: String
  orders: OrderCreateManyWithoutCustomerInput
  organizations: OrganizationCreateManyInput
  password: String!
  permissions: Permission
  resetToken: String
  resetTokenExpiry: Float
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  permissions_ASC
  permissions_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  permissions: Permission
  permissions_in: [Permission!]
  permissions_not: Permission
  permissions_not_in: [Permission!]
  resetToken: String
  resetToken_contains: String
  resetToken_ends_with: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_not: String
  resetToken_not_contains: String
  resetToken_not_ends_with: String
  resetToken_not_in: [String!]
  resetToken_not_starts_with: String
  resetToken_starts_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_not_in: [Float!]
}

input UserUpdateDataInput {
  cart: CartUpdateOneWithoutCustomerInput
  email: String
  name: String
  orders: OrderUpdateManyWithoutCustomerInput
  organizations: OrganizationUpdateManyInput
  password: String
  permissions: Permission
  resetToken: String
  resetTokenExpiry: Float
  table: TableUpdateOneWithoutCustomersInput
}

input UserUpdateInput {
  cart: CartUpdateOneWithoutCustomerInput
  email: String
  name: String
  orders: OrderUpdateManyWithoutCustomerInput
  organizations: OrganizationUpdateManyInput
  password: String
  permissions: Permission
  resetToken: String
  resetTokenExpiry: Float
  table: TableUpdateOneWithoutCustomersInput
}

input UserUpdateManyDataInput {
  email: String
  name: String
  password: String
  permissions: Permission
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateManyInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
  permissions: Permission
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateManyWithoutTableInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutTableInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTableInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTableInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredInput {
  connect: UserWhereUniqueInput
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutCartInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCartInput
  update: UserUpdateWithoutCartDataInput
  upsert: UserUpsertWithoutCartInput
}

input UserUpdateOneRequiredWithoutOrdersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOrdersInput
  update: UserUpdateWithoutOrdersDataInput
  upsert: UserUpsertWithoutOrdersInput
}

input UserUpdateWithoutCartDataInput {
  email: String
  name: String
  orders: OrderUpdateManyWithoutCustomerInput
  organizations: OrganizationUpdateManyInput
  password: String
  permissions: Permission
  resetToken: String
  resetTokenExpiry: Float
  table: TableUpdateOneWithoutCustomersInput
}

input UserUpdateWithoutOrdersDataInput {
  cart: CartUpdateOneWithoutCustomerInput
  email: String
  name: String
  organizations: OrganizationUpdateManyInput
  password: String
  permissions: Permission
  resetToken: String
  resetTokenExpiry: Float
  table: TableUpdateOneWithoutCustomersInput
}

input UserUpdateWithoutTableDataInput {
  cart: CartUpdateOneWithoutCustomerInput
  email: String
  name: String
  orders: OrderUpdateManyWithoutCustomerInput
  organizations: OrganizationUpdateManyInput
  password: String
  permissions: Permission
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateWithWhereUniqueNestedInput {
  data: UserUpdateDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutTableInput {
  data: UserUpdateWithoutTableDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertNestedInput {
  create: UserCreateInput!
  update: UserUpdateDataInput!
}

input UserUpsertWithoutCartInput {
  create: UserCreateWithoutCartInput!
  update: UserUpdateWithoutCartDataInput!
}

input UserUpsertWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput!
  update: UserUpdateWithoutOrdersDataInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  create: UserCreateInput!
  update: UserUpdateDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutTableInput {
  create: UserCreateWithoutTableInput!
  update: UserUpdateWithoutTableDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  cart: CartWhereInput
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  orders_every: OrderWhereInput
  orders_none: OrderWhereInput
  orders_some: OrderWhereInput
  organizations_every: OrganizationWhereInput
  organizations_none: OrganizationWhereInput
  organizations_some: OrganizationWhereInput
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  permissions: Permission
  permissions_in: [Permission!]
  permissions_not: Permission
  permissions_not_in: [Permission!]
  resetToken: String
  resetToken_contains: String
  resetToken_ends_with: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_not: String
  resetToken_not_contains: String
  resetToken_not_ends_with: String
  resetToken_not_in: [String!]
  resetToken_not_starts_with: String
  resetToken_starts_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_not_in: [Float!]
  table: TableWhereInput
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
