// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  cart: (where?: CartWhereInput) => Promise<boolean>;
  menu: (where?: MenuWhereInput) => Promise<boolean>;
  menuChoice: (where?: MenuChoiceWhereInput) => Promise<boolean>;
  menuHeader: (where?: MenuHeaderWhereInput) => Promise<boolean>;
  menuItem: (where?: MenuItemWhereInput) => Promise<boolean>;
  menuSelection: (where?: MenuSelectionWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  orderItem: (where?: OrderItemWhereInput) => Promise<boolean>;
  organization: (where?: OrganizationWhereInput) => Promise<boolean>;
  table: (where?: TableWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  cart: (where: CartWhereUniqueInput) => CartNullablePromise;
  carts: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cart>;
  cartsConnection: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CartConnectionPromise;
  menu: (where: MenuWhereUniqueInput) => MenuNullablePromise;
  menus: (args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Menu>;
  menusConnection: (args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MenuConnectionPromise;
  menuChoice: (where: MenuChoiceWhereUniqueInput) => MenuChoiceNullablePromise;
  menuChoices: (args?: {
    where?: MenuChoiceWhereInput;
    orderBy?: MenuChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MenuChoice>;
  menuChoicesConnection: (args?: {
    where?: MenuChoiceWhereInput;
    orderBy?: MenuChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MenuChoiceConnectionPromise;
  menuHeader: (where: MenuHeaderWhereUniqueInput) => MenuHeaderNullablePromise;
  menuHeaders: (args?: {
    where?: MenuHeaderWhereInput;
    orderBy?: MenuHeaderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MenuHeader>;
  menuHeadersConnection: (args?: {
    where?: MenuHeaderWhereInput;
    orderBy?: MenuHeaderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MenuHeaderConnectionPromise;
  menuItem: (where: MenuItemWhereUniqueInput) => MenuItemNullablePromise;
  menuItems: (args?: {
    where?: MenuItemWhereInput;
    orderBy?: MenuItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MenuItem>;
  menuItemsConnection: (args?: {
    where?: MenuItemWhereInput;
    orderBy?: MenuItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MenuItemConnectionPromise;
  menuSelection: (
    where: MenuSelectionWhereUniqueInput
  ) => MenuSelectionNullablePromise;
  menuSelections: (args?: {
    where?: MenuSelectionWhereInput;
    orderBy?: MenuSelectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MenuSelection>;
  menuSelectionsConnection: (args?: {
    where?: MenuSelectionWhereInput;
    orderBy?: MenuSelectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MenuSelectionConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  orderItem: (where: OrderItemWhereUniqueInput) => OrderItemNullablePromise;
  orderItems: (args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<OrderItem>;
  orderItemsConnection: (args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderItemConnectionPromise;
  organization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationNullablePromise;
  organizations: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Organization>;
  organizationsConnection: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrganizationConnectionPromise;
  table: (where: TableWhereUniqueInput) => TableNullablePromise;
  tables: (args?: {
    where?: TableWhereInput;
    orderBy?: TableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Table>;
  tablesConnection: (args?: {
    where?: TableWhereInput;
    orderBy?: TableOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TableConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCart: (data: CartCreateInput) => CartPromise;
  updateCart: (args: {
    data: CartUpdateInput;
    where: CartWhereUniqueInput;
  }) => CartPromise;
  updateManyCarts: (args: {
    data: CartUpdateManyMutationInput;
    where?: CartWhereInput;
  }) => BatchPayloadPromise;
  upsertCart: (args: {
    where: CartWhereUniqueInput;
    create: CartCreateInput;
    update: CartUpdateInput;
  }) => CartPromise;
  deleteCart: (where: CartWhereUniqueInput) => CartPromise;
  deleteManyCarts: (where?: CartWhereInput) => BatchPayloadPromise;
  createMenu: (data: MenuCreateInput) => MenuPromise;
  updateMenu: (args: {
    data: MenuUpdateInput;
    where: MenuWhereUniqueInput;
  }) => MenuPromise;
  updateManyMenus: (args: {
    data: MenuUpdateManyMutationInput;
    where?: MenuWhereInput;
  }) => BatchPayloadPromise;
  upsertMenu: (args: {
    where: MenuWhereUniqueInput;
    create: MenuCreateInput;
    update: MenuUpdateInput;
  }) => MenuPromise;
  deleteMenu: (where: MenuWhereUniqueInput) => MenuPromise;
  deleteManyMenus: (where?: MenuWhereInput) => BatchPayloadPromise;
  createMenuChoice: (data: MenuChoiceCreateInput) => MenuChoicePromise;
  updateMenuChoice: (args: {
    data: MenuChoiceUpdateInput;
    where: MenuChoiceWhereUniqueInput;
  }) => MenuChoicePromise;
  updateManyMenuChoices: (args: {
    data: MenuChoiceUpdateManyMutationInput;
    where?: MenuChoiceWhereInput;
  }) => BatchPayloadPromise;
  upsertMenuChoice: (args: {
    where: MenuChoiceWhereUniqueInput;
    create: MenuChoiceCreateInput;
    update: MenuChoiceUpdateInput;
  }) => MenuChoicePromise;
  deleteMenuChoice: (where: MenuChoiceWhereUniqueInput) => MenuChoicePromise;
  deleteManyMenuChoices: (where?: MenuChoiceWhereInput) => BatchPayloadPromise;
  createMenuHeader: (data: MenuHeaderCreateInput) => MenuHeaderPromise;
  updateMenuHeader: (args: {
    data: MenuHeaderUpdateInput;
    where: MenuHeaderWhereUniqueInput;
  }) => MenuHeaderPromise;
  updateManyMenuHeaders: (args: {
    data: MenuHeaderUpdateManyMutationInput;
    where?: MenuHeaderWhereInput;
  }) => BatchPayloadPromise;
  upsertMenuHeader: (args: {
    where: MenuHeaderWhereUniqueInput;
    create: MenuHeaderCreateInput;
    update: MenuHeaderUpdateInput;
  }) => MenuHeaderPromise;
  deleteMenuHeader: (where: MenuHeaderWhereUniqueInput) => MenuHeaderPromise;
  deleteManyMenuHeaders: (where?: MenuHeaderWhereInput) => BatchPayloadPromise;
  createMenuItem: (data: MenuItemCreateInput) => MenuItemPromise;
  updateMenuItem: (args: {
    data: MenuItemUpdateInput;
    where: MenuItemWhereUniqueInput;
  }) => MenuItemPromise;
  updateManyMenuItems: (args: {
    data: MenuItemUpdateManyMutationInput;
    where?: MenuItemWhereInput;
  }) => BatchPayloadPromise;
  upsertMenuItem: (args: {
    where: MenuItemWhereUniqueInput;
    create: MenuItemCreateInput;
    update: MenuItemUpdateInput;
  }) => MenuItemPromise;
  deleteMenuItem: (where: MenuItemWhereUniqueInput) => MenuItemPromise;
  deleteManyMenuItems: (where?: MenuItemWhereInput) => BatchPayloadPromise;
  createMenuSelection: (data: MenuSelectionCreateInput) => MenuSelectionPromise;
  updateMenuSelection: (args: {
    data: MenuSelectionUpdateInput;
    where: MenuSelectionWhereUniqueInput;
  }) => MenuSelectionPromise;
  updateManyMenuSelections: (args: {
    data: MenuSelectionUpdateManyMutationInput;
    where?: MenuSelectionWhereInput;
  }) => BatchPayloadPromise;
  upsertMenuSelection: (args: {
    where: MenuSelectionWhereUniqueInput;
    create: MenuSelectionCreateInput;
    update: MenuSelectionUpdateInput;
  }) => MenuSelectionPromise;
  deleteMenuSelection: (
    where: MenuSelectionWhereUniqueInput
  ) => MenuSelectionPromise;
  deleteManyMenuSelections: (
    where?: MenuSelectionWhereInput
  ) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createOrderItem: (data: OrderItemCreateInput) => OrderItemPromise;
  updateOrderItem: (args: {
    data: OrderItemUpdateInput;
    where: OrderItemWhereUniqueInput;
  }) => OrderItemPromise;
  updateManyOrderItems: (args: {
    data: OrderItemUpdateManyMutationInput;
    where?: OrderItemWhereInput;
  }) => BatchPayloadPromise;
  upsertOrderItem: (args: {
    where: OrderItemWhereUniqueInput;
    create: OrderItemCreateInput;
    update: OrderItemUpdateInput;
  }) => OrderItemPromise;
  deleteOrderItem: (where: OrderItemWhereUniqueInput) => OrderItemPromise;
  deleteManyOrderItems: (where?: OrderItemWhereInput) => BatchPayloadPromise;
  createOrganization: (data: OrganizationCreateInput) => OrganizationPromise;
  updateOrganization: (args: {
    data: OrganizationUpdateInput;
    where: OrganizationWhereUniqueInput;
  }) => OrganizationPromise;
  updateManyOrganizations: (args: {
    data: OrganizationUpdateManyMutationInput;
    where?: OrganizationWhereInput;
  }) => BatchPayloadPromise;
  upsertOrganization: (args: {
    where: OrganizationWhereUniqueInput;
    create: OrganizationCreateInput;
    update: OrganizationUpdateInput;
  }) => OrganizationPromise;
  deleteOrganization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationPromise;
  deleteManyOrganizations: (
    where?: OrganizationWhereInput
  ) => BatchPayloadPromise;
  createTable: (data: TableCreateInput) => TablePromise;
  updateTable: (args: {
    data: TableUpdateInput;
    where: TableWhereUniqueInput;
  }) => TablePromise;
  upsertTable: (args: {
    where: TableWhereUniqueInput;
    create: TableCreateInput;
    update: TableUpdateInput;
  }) => TablePromise;
  deleteTable: (where: TableWhereUniqueInput) => TablePromise;
  deleteManyTables: (where?: TableWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  cart: (
    where?: CartSubscriptionWhereInput
  ) => CartSubscriptionPayloadSubscription;
  menu: (
    where?: MenuSubscriptionWhereInput
  ) => MenuSubscriptionPayloadSubscription;
  menuChoice: (
    where?: MenuChoiceSubscriptionWhereInput
  ) => MenuChoiceSubscriptionPayloadSubscription;
  menuHeader: (
    where?: MenuHeaderSubscriptionWhereInput
  ) => MenuHeaderSubscriptionPayloadSubscription;
  menuItem: (
    where?: MenuItemSubscriptionWhereInput
  ) => MenuItemSubscriptionPayloadSubscription;
  menuSelection: (
    where?: MenuSelectionSubscriptionWhereInput
  ) => MenuSelectionSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  orderItem: (
    where?: OrderItemSubscriptionWhereInput
  ) => OrderItemSubscriptionPayloadSubscription;
  organization: (
    where?: OrganizationSubscriptionWhereInput
  ) => OrganizationSubscriptionPayloadSubscription;
  table: (
    where?: TableSubscriptionWhereInput
  ) => TableSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Permission = "DEVELOPER" | "OWNER" | "ADMIN" | "CUSTOMER";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "total_ASC"
  | "total_DESC"
  | "charge_ASC"
  | "charge_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "price_ASC"
  | "price_DESC"
  | "quantity_ASC"
  | "quantity_DESC";

export type OrganizationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "permissions_ASC"
  | "permissions_DESC";

export type MenuOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC";

export type MenuItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "basePrice_ASC"
  | "basePrice_DESC"
  | "description_ASC"
  | "description_DESC"
  | "name_ASC"
  | "name_DESC"
  | "image_ASC"
  | "image_DESC"
  | "largeImage_ASC"
  | "largeImage_DESC";

export type MenuChoiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "header_ASC"
  | "header_DESC"
  | "subHeader_ASC"
  | "subHeader_DESC";

export type MenuSelectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "selected_ASC"
  | "selected_DESC"
  | "valueAdd_ASC"
  | "valueAdd_DESC";

export type CartOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "total_ASC"
  | "total_DESC";

export type MenuHeaderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "subHeader_ASC"
  | "subHeader_DESC";

export type TableOrderByInput = "id_ASC" | "id_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CartWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  items_every?: Maybe<OrderItemWhereInput>;
  items_some?: Maybe<OrderItemWhereInput>;
  items_none?: Maybe<OrderItemWhereInput>;
  total?: Maybe<Int>;
  total_not?: Maybe<Int>;
  total_in?: Maybe<Int[] | Int>;
  total_not_in?: Maybe<Int[] | Int>;
  total_lt?: Maybe<Int>;
  total_lte?: Maybe<Int>;
  total_gt?: Maybe<Int>;
  total_gte?: Maybe<Int>;
  customer?: Maybe<UserWhereInput>;
  charge?: Maybe<String>;
  charge_not?: Maybe<String>;
  charge_in?: Maybe<String[] | String>;
  charge_not_in?: Maybe<String[] | String>;
  charge_lt?: Maybe<String>;
  charge_lte?: Maybe<String>;
  charge_gt?: Maybe<String>;
  charge_gte?: Maybe<String>;
  charge_contains?: Maybe<String>;
  charge_not_contains?: Maybe<String>;
  charge_starts_with?: Maybe<String>;
  charge_not_starts_with?: Maybe<String>;
  charge_ends_with?: Maybe<String>;
  charge_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  OR?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  NOT?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export interface OrderItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  customer?: Maybe<UserWhereInput>;
  AND?: Maybe<OrderItemWhereInput[] | OrderItemWhereInput>;
  OR?: Maybe<OrderItemWhereInput[] | OrderItemWhereInput>;
  NOT?: Maybe<OrderItemWhereInput[] | OrderItemWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  organizations_every?: Maybe<OrganizationWhereInput>;
  organizations_some?: Maybe<OrganizationWhereInput>;
  organizations_none?: Maybe<OrganizationWhereInput>;
  table?: Maybe<TableWhereInput>;
  cart?: Maybe<CartWhereInput>;
  orders_every?: Maybe<OrderWhereInput>;
  orders_some?: Maybe<OrderWhereInput>;
  orders_none?: Maybe<OrderWhereInput>;
  permissions?: Maybe<Permission>;
  permissions_not?: Maybe<Permission>;
  permissions_in?: Maybe<Permission[] | Permission>;
  permissions_not_in?: Maybe<Permission[] | Permission>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface OrganizationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  menus_every?: Maybe<MenuWhereInput>;
  menus_some?: Maybe<MenuWhereInput>;
  menus_none?: Maybe<MenuWhereInput>;
  createdBy?: Maybe<UserWhereInput>;
  AND?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  OR?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  NOT?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
}

export interface MenuWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  menu_items_every?: Maybe<MenuItemWhereInput>;
  menu_items_some?: Maybe<MenuItemWhereInput>;
  menu_items_none?: Maybe<MenuItemWhereInput>;
  organization?: Maybe<OrganizationWhereInput>;
  AND?: Maybe<MenuWhereInput[] | MenuWhereInput>;
  OR?: Maybe<MenuWhereInput[] | MenuWhereInput>;
  NOT?: Maybe<MenuWhereInput[] | MenuWhereInput>;
}

export interface MenuItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  basePrice?: Maybe<String>;
  basePrice_not?: Maybe<String>;
  basePrice_in?: Maybe<String[] | String>;
  basePrice_not_in?: Maybe<String[] | String>;
  basePrice_lt?: Maybe<String>;
  basePrice_lte?: Maybe<String>;
  basePrice_gt?: Maybe<String>;
  basePrice_gte?: Maybe<String>;
  basePrice_contains?: Maybe<String>;
  basePrice_not_contains?: Maybe<String>;
  basePrice_starts_with?: Maybe<String>;
  basePrice_not_starts_with?: Maybe<String>;
  basePrice_ends_with?: Maybe<String>;
  basePrice_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  menu?: Maybe<MenuWhereInput>;
  options_every?: Maybe<MenuChoiceWhereInput>;
  options_some?: Maybe<MenuChoiceWhereInput>;
  options_none?: Maybe<MenuChoiceWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  largeImage?: Maybe<String>;
  largeImage_not?: Maybe<String>;
  largeImage_in?: Maybe<String[] | String>;
  largeImage_not_in?: Maybe<String[] | String>;
  largeImage_lt?: Maybe<String>;
  largeImage_lte?: Maybe<String>;
  largeImage_gt?: Maybe<String>;
  largeImage_gte?: Maybe<String>;
  largeImage_contains?: Maybe<String>;
  largeImage_not_contains?: Maybe<String>;
  largeImage_starts_with?: Maybe<String>;
  largeImage_not_starts_with?: Maybe<String>;
  largeImage_ends_with?: Maybe<String>;
  largeImage_not_ends_with?: Maybe<String>;
  menuHeader?: Maybe<MenuHeaderWhereInput>;
  AND?: Maybe<MenuItemWhereInput[] | MenuItemWhereInput>;
  OR?: Maybe<MenuItemWhereInput[] | MenuItemWhereInput>;
  NOT?: Maybe<MenuItemWhereInput[] | MenuItemWhereInput>;
}

export interface MenuChoiceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  header?: Maybe<String>;
  header_not?: Maybe<String>;
  header_in?: Maybe<String[] | String>;
  header_not_in?: Maybe<String[] | String>;
  header_lt?: Maybe<String>;
  header_lte?: Maybe<String>;
  header_gt?: Maybe<String>;
  header_gte?: Maybe<String>;
  header_contains?: Maybe<String>;
  header_not_contains?: Maybe<String>;
  header_starts_with?: Maybe<String>;
  header_not_starts_with?: Maybe<String>;
  header_ends_with?: Maybe<String>;
  header_not_ends_with?: Maybe<String>;
  subHeader?: Maybe<String>;
  subHeader_not?: Maybe<String>;
  subHeader_in?: Maybe<String[] | String>;
  subHeader_not_in?: Maybe<String[] | String>;
  subHeader_lt?: Maybe<String>;
  subHeader_lte?: Maybe<String>;
  subHeader_gt?: Maybe<String>;
  subHeader_gte?: Maybe<String>;
  subHeader_contains?: Maybe<String>;
  subHeader_not_contains?: Maybe<String>;
  subHeader_starts_with?: Maybe<String>;
  subHeader_not_starts_with?: Maybe<String>;
  subHeader_ends_with?: Maybe<String>;
  subHeader_not_ends_with?: Maybe<String>;
  selections_every?: Maybe<MenuSelectionWhereInput>;
  selections_some?: Maybe<MenuSelectionWhereInput>;
  selections_none?: Maybe<MenuSelectionWhereInput>;
  menu_items_every?: Maybe<MenuItemWhereInput>;
  menu_items_some?: Maybe<MenuItemWhereInput>;
  menu_items_none?: Maybe<MenuItemWhereInput>;
  AND?: Maybe<MenuChoiceWhereInput[] | MenuChoiceWhereInput>;
  OR?: Maybe<MenuChoiceWhereInput[] | MenuChoiceWhereInput>;
  NOT?: Maybe<MenuChoiceWhereInput[] | MenuChoiceWhereInput>;
}

export interface MenuSelectionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  selected?: Maybe<Boolean>;
  selected_not?: Maybe<Boolean>;
  valueAdd?: Maybe<String>;
  valueAdd_not?: Maybe<String>;
  valueAdd_in?: Maybe<String[] | String>;
  valueAdd_not_in?: Maybe<String[] | String>;
  valueAdd_lt?: Maybe<String>;
  valueAdd_lte?: Maybe<String>;
  valueAdd_gt?: Maybe<String>;
  valueAdd_gte?: Maybe<String>;
  valueAdd_contains?: Maybe<String>;
  valueAdd_not_contains?: Maybe<String>;
  valueAdd_starts_with?: Maybe<String>;
  valueAdd_not_starts_with?: Maybe<String>;
  valueAdd_ends_with?: Maybe<String>;
  valueAdd_not_ends_with?: Maybe<String>;
  option?: Maybe<MenuChoiceWhereInput>;
  AND?: Maybe<MenuSelectionWhereInput[] | MenuSelectionWhereInput>;
  OR?: Maybe<MenuSelectionWhereInput[] | MenuSelectionWhereInput>;
  NOT?: Maybe<MenuSelectionWhereInput[] | MenuSelectionWhereInput>;
}

export interface MenuHeaderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  subHeader?: Maybe<String>;
  subHeader_not?: Maybe<String>;
  subHeader_in?: Maybe<String[] | String>;
  subHeader_not_in?: Maybe<String[] | String>;
  subHeader_lt?: Maybe<String>;
  subHeader_lte?: Maybe<String>;
  subHeader_gt?: Maybe<String>;
  subHeader_gte?: Maybe<String>;
  subHeader_contains?: Maybe<String>;
  subHeader_not_contains?: Maybe<String>;
  subHeader_starts_with?: Maybe<String>;
  subHeader_not_starts_with?: Maybe<String>;
  subHeader_ends_with?: Maybe<String>;
  subHeader_not_ends_with?: Maybe<String>;
  menu_items_every?: Maybe<MenuItemWhereInput>;
  menu_items_some?: Maybe<MenuItemWhereInput>;
  menu_items_none?: Maybe<MenuItemWhereInput>;
  menu?: Maybe<MenuWhereInput>;
  AND?: Maybe<MenuHeaderWhereInput[] | MenuHeaderWhereInput>;
  OR?: Maybe<MenuHeaderWhereInput[] | MenuHeaderWhereInput>;
  NOT?: Maybe<MenuHeaderWhereInput[] | MenuHeaderWhereInput>;
}

export interface TableWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  customers_every?: Maybe<UserWhereInput>;
  customers_some?: Maybe<UserWhereInput>;
  customers_none?: Maybe<UserWhereInput>;
  carts_every?: Maybe<CartWhereInput>;
  carts_some?: Maybe<CartWhereInput>;
  carts_none?: Maybe<CartWhereInput>;
  AND?: Maybe<TableWhereInput[] | TableWhereInput>;
  OR?: Maybe<TableWhereInput[] | TableWhereInput>;
  NOT?: Maybe<TableWhereInput[] | TableWhereInput>;
}

export interface CartWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  orders_every?: Maybe<OrderWhereInput>;
  orders_some?: Maybe<OrderWhereInput>;
  orders_none?: Maybe<OrderWhereInput>;
  customer?: Maybe<UserWhereInput>;
  table?: Maybe<TableWhereInput>;
  total?: Maybe<Int>;
  total_not?: Maybe<Int>;
  total_in?: Maybe<Int[] | Int>;
  total_not_in?: Maybe<Int[] | Int>;
  total_lt?: Maybe<Int>;
  total_lte?: Maybe<Int>;
  total_gt?: Maybe<Int>;
  total_gte?: Maybe<Int>;
  AND?: Maybe<CartWhereInput[] | CartWhereInput>;
  OR?: Maybe<CartWhereInput[] | CartWhereInput>;
  NOT?: Maybe<CartWhereInput[] | CartWhereInput>;
}

export type MenuWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MenuChoiceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MenuHeaderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MenuItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type MenuSelectionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrderItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrganizationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TableWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CartCreateInput {
  id?: Maybe<ID_Input>;
  orders?: Maybe<OrderCreateManyInput>;
  customer: UserCreateOneWithoutCartInput;
  table?: Maybe<TableCreateOneWithoutCartsInput>;
  total: Int;
}

export interface OrderCreateManyInput {
  create?: Maybe<OrderCreateInput[] | OrderCreateInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
}

export interface OrderCreateInput {
  id?: Maybe<ID_Input>;
  items?: Maybe<OrderItemCreateManyInput>;
  total: Int;
  customer: UserCreateOneWithoutOrdersInput;
  charge: String;
}

export interface OrderItemCreateManyInput {
  create?: Maybe<OrderItemCreateInput[] | OrderItemCreateInput>;
  connect?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
}

export interface OrderItemCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  price: Int;
  quantity?: Maybe<Int>;
  customer: UserCreateOneInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  name?: Maybe<String>;
  password: String;
  organizations?: Maybe<OrganizationCreateManyWithoutCreatedByInput>;
  table?: Maybe<TableCreateOneWithoutCustomersInput>;
  cart?: Maybe<CartCreateOneWithoutCustomerInput>;
  orders?: Maybe<OrderCreateManyWithoutCustomerInput>;
  permissions?: Maybe<Permission>;
}

export interface OrganizationCreateManyWithoutCreatedByInput {
  create?: Maybe<
    | OrganizationCreateWithoutCreatedByInput[]
    | OrganizationCreateWithoutCreatedByInput
  >;
  connect?: Maybe<
    OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput
  >;
}

export interface OrganizationCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  users?: Maybe<UserCreateManyInput>;
  menus?: Maybe<MenuCreateManyWithoutOrganizationInput>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface MenuCreateManyWithoutOrganizationInput {
  create?: Maybe<
    MenuCreateWithoutOrganizationInput[] | MenuCreateWithoutOrganizationInput
  >;
  connect?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
}

export interface MenuCreateWithoutOrganizationInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  title: String;
  menu_items?: Maybe<MenuItemCreateManyWithoutMenuInput>;
}

export interface MenuItemCreateManyWithoutMenuInput {
  create?: Maybe<
    MenuItemCreateWithoutMenuInput[] | MenuItemCreateWithoutMenuInput
  >;
  connect?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
}

export interface MenuItemCreateWithoutMenuInput {
  id?: Maybe<ID_Input>;
  basePrice: String;
  description?: Maybe<String>;
  options?: Maybe<MenuChoiceCreateManyWithoutMenu_itemsInput>;
  name: String;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  menuHeader?: Maybe<MenuHeaderCreateOneWithoutMenu_itemsInput>;
}

export interface MenuChoiceCreateManyWithoutMenu_itemsInput {
  create?: Maybe<
    | MenuChoiceCreateWithoutMenu_itemsInput[]
    | MenuChoiceCreateWithoutMenu_itemsInput
  >;
  connect?: Maybe<MenuChoiceWhereUniqueInput[] | MenuChoiceWhereUniqueInput>;
}

export interface MenuChoiceCreateWithoutMenu_itemsInput {
  id?: Maybe<ID_Input>;
  header: String;
  subHeader?: Maybe<String>;
  selections?: Maybe<MenuSelectionCreateManyWithoutOptionInput>;
}

export interface MenuSelectionCreateManyWithoutOptionInput {
  create?: Maybe<
    | MenuSelectionCreateWithoutOptionInput[]
    | MenuSelectionCreateWithoutOptionInput
  >;
  connect?: Maybe<
    MenuSelectionWhereUniqueInput[] | MenuSelectionWhereUniqueInput
  >;
}

export interface MenuSelectionCreateWithoutOptionInput {
  id?: Maybe<ID_Input>;
  name: String;
  selected?: Maybe<Boolean>;
  valueAdd?: Maybe<String>;
}

export interface MenuHeaderCreateOneWithoutMenu_itemsInput {
  create?: Maybe<MenuHeaderCreateWithoutMenu_itemsInput>;
  connect?: Maybe<MenuHeaderWhereUniqueInput>;
}

export interface MenuHeaderCreateWithoutMenu_itemsInput {
  id?: Maybe<ID_Input>;
  name: String;
  subHeader?: Maybe<String>;
  menu?: Maybe<MenuCreateOneInput>;
}

export interface MenuCreateOneInput {
  create?: Maybe<MenuCreateInput>;
  connect?: Maybe<MenuWhereUniqueInput>;
}

export interface MenuCreateInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  title: String;
  menu_items?: Maybe<MenuItemCreateManyWithoutMenuInput>;
  organization: OrganizationCreateOneWithoutMenusInput;
}

export interface OrganizationCreateOneWithoutMenusInput {
  create?: Maybe<OrganizationCreateWithoutMenusInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationCreateWithoutMenusInput {
  id?: Maybe<ID_Input>;
  name: String;
  users?: Maybe<UserCreateManyInput>;
  createdBy: UserCreateOneWithoutOrganizationsInput;
}

export interface UserCreateOneWithoutOrganizationsInput {
  create?: Maybe<UserCreateWithoutOrganizationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutOrganizationsInput {
  id?: Maybe<ID_Input>;
  email: String;
  name?: Maybe<String>;
  password: String;
  table?: Maybe<TableCreateOneWithoutCustomersInput>;
  cart?: Maybe<CartCreateOneWithoutCustomerInput>;
  orders?: Maybe<OrderCreateManyWithoutCustomerInput>;
  permissions?: Maybe<Permission>;
}

export interface TableCreateOneWithoutCustomersInput {
  create?: Maybe<TableCreateWithoutCustomersInput>;
  connect?: Maybe<TableWhereUniqueInput>;
}

export interface TableCreateWithoutCustomersInput {
  id?: Maybe<ID_Input>;
  carts?: Maybe<CartCreateManyWithoutTableInput>;
}

export interface CartCreateManyWithoutTableInput {
  create?: Maybe<CartCreateWithoutTableInput[] | CartCreateWithoutTableInput>;
  connect?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
}

export interface CartCreateWithoutTableInput {
  id?: Maybe<ID_Input>;
  orders?: Maybe<OrderCreateManyInput>;
  customer: UserCreateOneWithoutCartInput;
  total: Int;
}

export interface UserCreateOneWithoutCartInput {
  create?: Maybe<UserCreateWithoutCartInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCartInput {
  id?: Maybe<ID_Input>;
  email: String;
  name?: Maybe<String>;
  password: String;
  organizations?: Maybe<OrganizationCreateManyWithoutCreatedByInput>;
  table?: Maybe<TableCreateOneWithoutCustomersInput>;
  orders?: Maybe<OrderCreateManyWithoutCustomerInput>;
  permissions?: Maybe<Permission>;
}

export interface OrderCreateManyWithoutCustomerInput {
  create?: Maybe<
    OrderCreateWithoutCustomerInput[] | OrderCreateWithoutCustomerInput
  >;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
}

export interface OrderCreateWithoutCustomerInput {
  id?: Maybe<ID_Input>;
  items?: Maybe<OrderItemCreateManyInput>;
  total: Int;
  charge: String;
}

export interface CartCreateOneWithoutCustomerInput {
  create?: Maybe<CartCreateWithoutCustomerInput>;
  connect?: Maybe<CartWhereUniqueInput>;
}

export interface CartCreateWithoutCustomerInput {
  id?: Maybe<ID_Input>;
  orders?: Maybe<OrderCreateManyInput>;
  table?: Maybe<TableCreateOneWithoutCartsInput>;
  total: Int;
}

export interface TableCreateOneWithoutCartsInput {
  create?: Maybe<TableCreateWithoutCartsInput>;
  connect?: Maybe<TableWhereUniqueInput>;
}

export interface TableCreateWithoutCartsInput {
  id?: Maybe<ID_Input>;
  customers?: Maybe<UserCreateManyWithoutTableInput>;
}

export interface UserCreateManyWithoutTableInput {
  create?: Maybe<UserCreateWithoutTableInput[] | UserCreateWithoutTableInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutTableInput {
  id?: Maybe<ID_Input>;
  email: String;
  name?: Maybe<String>;
  password: String;
  organizations?: Maybe<OrganizationCreateManyWithoutCreatedByInput>;
  cart?: Maybe<CartCreateOneWithoutCustomerInput>;
  orders?: Maybe<OrderCreateManyWithoutCustomerInput>;
  permissions?: Maybe<Permission>;
}

export interface UserCreateOneWithoutOrdersInput {
  create?: Maybe<UserCreateWithoutOrdersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutOrdersInput {
  id?: Maybe<ID_Input>;
  email: String;
  name?: Maybe<String>;
  password: String;
  organizations?: Maybe<OrganizationCreateManyWithoutCreatedByInput>;
  table?: Maybe<TableCreateOneWithoutCustomersInput>;
  cart?: Maybe<CartCreateOneWithoutCustomerInput>;
  permissions?: Maybe<Permission>;
}

export interface CartUpdateInput {
  orders?: Maybe<OrderUpdateManyInput>;
  customer?: Maybe<UserUpdateOneRequiredWithoutCartInput>;
  table?: Maybe<TableUpdateOneWithoutCartsInput>;
  total?: Maybe<Int>;
}

export interface OrderUpdateManyInput {
  create?: Maybe<OrderCreateInput[] | OrderCreateInput>;
  update?: Maybe<
    | OrderUpdateWithWhereUniqueNestedInput[]
    | OrderUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | OrderUpsertWithWhereUniqueNestedInput[]
    | OrderUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  set?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  disconnect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  deleteMany?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  updateMany?: Maybe<
    OrderUpdateManyWithWhereNestedInput[] | OrderUpdateManyWithWhereNestedInput
  >;
}

export interface OrderUpdateWithWhereUniqueNestedInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateDataInput;
}

export interface OrderUpdateDataInput {
  items?: Maybe<OrderItemUpdateManyInput>;
  total?: Maybe<Int>;
  customer?: Maybe<UserUpdateOneRequiredWithoutOrdersInput>;
  charge?: Maybe<String>;
}

export interface OrderItemUpdateManyInput {
  create?: Maybe<OrderItemCreateInput[] | OrderItemCreateInput>;
  update?: Maybe<
    | OrderItemUpdateWithWhereUniqueNestedInput[]
    | OrderItemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | OrderItemUpsertWithWhereUniqueNestedInput[]
    | OrderItemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
  connect?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
  set?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
  disconnect?: Maybe<OrderItemWhereUniqueInput[] | OrderItemWhereUniqueInput>;
  deleteMany?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
  updateMany?: Maybe<
    | OrderItemUpdateManyWithWhereNestedInput[]
    | OrderItemUpdateManyWithWhereNestedInput
  >;
}

export interface OrderItemUpdateWithWhereUniqueNestedInput {
  where: OrderItemWhereUniqueInput;
  data: OrderItemUpdateDataInput;
}

export interface OrderItemUpdateDataInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
  quantity?: Maybe<Int>;
  customer?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutCreatedByInput>;
  table?: Maybe<TableUpdateOneWithoutCustomersInput>;
  cart?: Maybe<CartUpdateOneWithoutCustomerInput>;
  orders?: Maybe<OrderUpdateManyWithoutCustomerInput>;
  permissions?: Maybe<Permission>;
}

export interface OrganizationUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    | OrganizationCreateWithoutCreatedByInput[]
    | OrganizationCreateWithoutCreatedByInput
  >;
  delete?: Maybe<OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput>;
  connect?: Maybe<
    OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput
  >;
  set?: Maybe<OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput>;
  disconnect?: Maybe<
    OrganizationWhereUniqueInput[] | OrganizationWhereUniqueInput
  >;
  update?: Maybe<
    | OrganizationUpdateWithWhereUniqueWithoutCreatedByInput[]
    | OrganizationUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | OrganizationUpsertWithWhereUniqueWithoutCreatedByInput[]
    | OrganizationUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<
    OrganizationScalarWhereInput[] | OrganizationScalarWhereInput
  >;
  updateMany?: Maybe<
    | OrganizationUpdateManyWithWhereNestedInput[]
    | OrganizationUpdateManyWithWhereNestedInput
  >;
}

export interface OrganizationUpdateWithWhereUniqueWithoutCreatedByInput {
  where: OrganizationWhereUniqueInput;
  data: OrganizationUpdateWithoutCreatedByDataInput;
}

export interface OrganizationUpdateWithoutCreatedByDataInput {
  name?: Maybe<String>;
  users?: Maybe<UserUpdateManyInput>;
  menus?: Maybe<MenuUpdateManyWithoutOrganizationInput>;
}

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  permissions?: Maybe<Permission>;
  permissions_not?: Maybe<Permission>;
  permissions_in?: Maybe<Permission[] | Permission>;
  permissions_not_in?: Maybe<Permission[] | Permission>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  permissions?: Maybe<Permission>;
}

export interface MenuUpdateManyWithoutOrganizationInput {
  create?: Maybe<
    MenuCreateWithoutOrganizationInput[] | MenuCreateWithoutOrganizationInput
  >;
  delete?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  connect?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  set?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  disconnect?: Maybe<MenuWhereUniqueInput[] | MenuWhereUniqueInput>;
  update?: Maybe<
    | MenuUpdateWithWhereUniqueWithoutOrganizationInput[]
    | MenuUpdateWithWhereUniqueWithoutOrganizationInput
  >;
  upsert?: Maybe<
    | MenuUpsertWithWhereUniqueWithoutOrganizationInput[]
    | MenuUpsertWithWhereUniqueWithoutOrganizationInput
  >;
  deleteMany?: Maybe<MenuScalarWhereInput[] | MenuScalarWhereInput>;
  updateMany?: Maybe<
    MenuUpdateManyWithWhereNestedInput[] | MenuUpdateManyWithWhereNestedInput
  >;
}

export interface MenuUpdateWithWhereUniqueWithoutOrganizationInput {
  where: MenuWhereUniqueInput;
  data: MenuUpdateWithoutOrganizationDataInput;
}

export interface MenuUpdateWithoutOrganizationDataInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  menu_items?: Maybe<MenuItemUpdateManyWithoutMenuInput>;
}

export interface MenuItemUpdateManyWithoutMenuInput {
  create?: Maybe<
    MenuItemCreateWithoutMenuInput[] | MenuItemCreateWithoutMenuInput
  >;
  delete?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
  connect?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
  set?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
  disconnect?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
  update?: Maybe<
    | MenuItemUpdateWithWhereUniqueWithoutMenuInput[]
    | MenuItemUpdateWithWhereUniqueWithoutMenuInput
  >;
  upsert?: Maybe<
    | MenuItemUpsertWithWhereUniqueWithoutMenuInput[]
    | MenuItemUpsertWithWhereUniqueWithoutMenuInput
  >;
  deleteMany?: Maybe<MenuItemScalarWhereInput[] | MenuItemScalarWhereInput>;
  updateMany?: Maybe<
    | MenuItemUpdateManyWithWhereNestedInput[]
    | MenuItemUpdateManyWithWhereNestedInput
  >;
}

export interface MenuItemUpdateWithWhereUniqueWithoutMenuInput {
  where: MenuItemWhereUniqueInput;
  data: MenuItemUpdateWithoutMenuDataInput;
}

export interface MenuItemUpdateWithoutMenuDataInput {
  basePrice?: Maybe<String>;
  description?: Maybe<String>;
  options?: Maybe<MenuChoiceUpdateManyWithoutMenu_itemsInput>;
  name?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  menuHeader?: Maybe<MenuHeaderUpdateOneWithoutMenu_itemsInput>;
}

export interface MenuChoiceUpdateManyWithoutMenu_itemsInput {
  create?: Maybe<
    | MenuChoiceCreateWithoutMenu_itemsInput[]
    | MenuChoiceCreateWithoutMenu_itemsInput
  >;
  delete?: Maybe<MenuChoiceWhereUniqueInput[] | MenuChoiceWhereUniqueInput>;
  connect?: Maybe<MenuChoiceWhereUniqueInput[] | MenuChoiceWhereUniqueInput>;
  set?: Maybe<MenuChoiceWhereUniqueInput[] | MenuChoiceWhereUniqueInput>;
  disconnect?: Maybe<MenuChoiceWhereUniqueInput[] | MenuChoiceWhereUniqueInput>;
  update?: Maybe<
    | MenuChoiceUpdateWithWhereUniqueWithoutMenu_itemsInput[]
    | MenuChoiceUpdateWithWhereUniqueWithoutMenu_itemsInput
  >;
  upsert?: Maybe<
    | MenuChoiceUpsertWithWhereUniqueWithoutMenu_itemsInput[]
    | MenuChoiceUpsertWithWhereUniqueWithoutMenu_itemsInput
  >;
  deleteMany?: Maybe<MenuChoiceScalarWhereInput[] | MenuChoiceScalarWhereInput>;
  updateMany?: Maybe<
    | MenuChoiceUpdateManyWithWhereNestedInput[]
    | MenuChoiceUpdateManyWithWhereNestedInput
  >;
}

export interface MenuChoiceUpdateWithWhereUniqueWithoutMenu_itemsInput {
  where: MenuChoiceWhereUniqueInput;
  data: MenuChoiceUpdateWithoutMenu_itemsDataInput;
}

export interface MenuChoiceUpdateWithoutMenu_itemsDataInput {
  header?: Maybe<String>;
  subHeader?: Maybe<String>;
  selections?: Maybe<MenuSelectionUpdateManyWithoutOptionInput>;
}

export interface MenuSelectionUpdateManyWithoutOptionInput {
  create?: Maybe<
    | MenuSelectionCreateWithoutOptionInput[]
    | MenuSelectionCreateWithoutOptionInput
  >;
  delete?: Maybe<
    MenuSelectionWhereUniqueInput[] | MenuSelectionWhereUniqueInput
  >;
  connect?: Maybe<
    MenuSelectionWhereUniqueInput[] | MenuSelectionWhereUniqueInput
  >;
  set?: Maybe<MenuSelectionWhereUniqueInput[] | MenuSelectionWhereUniqueInput>;
  disconnect?: Maybe<
    MenuSelectionWhereUniqueInput[] | MenuSelectionWhereUniqueInput
  >;
  update?: Maybe<
    | MenuSelectionUpdateWithWhereUniqueWithoutOptionInput[]
    | MenuSelectionUpdateWithWhereUniqueWithoutOptionInput
  >;
  upsert?: Maybe<
    | MenuSelectionUpsertWithWhereUniqueWithoutOptionInput[]
    | MenuSelectionUpsertWithWhereUniqueWithoutOptionInput
  >;
  deleteMany?: Maybe<
    MenuSelectionScalarWhereInput[] | MenuSelectionScalarWhereInput
  >;
  updateMany?: Maybe<
    | MenuSelectionUpdateManyWithWhereNestedInput[]
    | MenuSelectionUpdateManyWithWhereNestedInput
  >;
}

export interface MenuSelectionUpdateWithWhereUniqueWithoutOptionInput {
  where: MenuSelectionWhereUniqueInput;
  data: MenuSelectionUpdateWithoutOptionDataInput;
}

export interface MenuSelectionUpdateWithoutOptionDataInput {
  name?: Maybe<String>;
  selected?: Maybe<Boolean>;
  valueAdd?: Maybe<String>;
}

export interface MenuSelectionUpsertWithWhereUniqueWithoutOptionInput {
  where: MenuSelectionWhereUniqueInput;
  update: MenuSelectionUpdateWithoutOptionDataInput;
  create: MenuSelectionCreateWithoutOptionInput;
}

export interface MenuSelectionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  selected?: Maybe<Boolean>;
  selected_not?: Maybe<Boolean>;
  valueAdd?: Maybe<String>;
  valueAdd_not?: Maybe<String>;
  valueAdd_in?: Maybe<String[] | String>;
  valueAdd_not_in?: Maybe<String[] | String>;
  valueAdd_lt?: Maybe<String>;
  valueAdd_lte?: Maybe<String>;
  valueAdd_gt?: Maybe<String>;
  valueAdd_gte?: Maybe<String>;
  valueAdd_contains?: Maybe<String>;
  valueAdd_not_contains?: Maybe<String>;
  valueAdd_starts_with?: Maybe<String>;
  valueAdd_not_starts_with?: Maybe<String>;
  valueAdd_ends_with?: Maybe<String>;
  valueAdd_not_ends_with?: Maybe<String>;
  AND?: Maybe<MenuSelectionScalarWhereInput[] | MenuSelectionScalarWhereInput>;
  OR?: Maybe<MenuSelectionScalarWhereInput[] | MenuSelectionScalarWhereInput>;
  NOT?: Maybe<MenuSelectionScalarWhereInput[] | MenuSelectionScalarWhereInput>;
}

export interface MenuSelectionUpdateManyWithWhereNestedInput {
  where: MenuSelectionScalarWhereInput;
  data: MenuSelectionUpdateManyDataInput;
}

export interface MenuSelectionUpdateManyDataInput {
  name?: Maybe<String>;
  selected?: Maybe<Boolean>;
  valueAdd?: Maybe<String>;
}

export interface MenuChoiceUpsertWithWhereUniqueWithoutMenu_itemsInput {
  where: MenuChoiceWhereUniqueInput;
  update: MenuChoiceUpdateWithoutMenu_itemsDataInput;
  create: MenuChoiceCreateWithoutMenu_itemsInput;
}

export interface MenuChoiceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  header?: Maybe<String>;
  header_not?: Maybe<String>;
  header_in?: Maybe<String[] | String>;
  header_not_in?: Maybe<String[] | String>;
  header_lt?: Maybe<String>;
  header_lte?: Maybe<String>;
  header_gt?: Maybe<String>;
  header_gte?: Maybe<String>;
  header_contains?: Maybe<String>;
  header_not_contains?: Maybe<String>;
  header_starts_with?: Maybe<String>;
  header_not_starts_with?: Maybe<String>;
  header_ends_with?: Maybe<String>;
  header_not_ends_with?: Maybe<String>;
  subHeader?: Maybe<String>;
  subHeader_not?: Maybe<String>;
  subHeader_in?: Maybe<String[] | String>;
  subHeader_not_in?: Maybe<String[] | String>;
  subHeader_lt?: Maybe<String>;
  subHeader_lte?: Maybe<String>;
  subHeader_gt?: Maybe<String>;
  subHeader_gte?: Maybe<String>;
  subHeader_contains?: Maybe<String>;
  subHeader_not_contains?: Maybe<String>;
  subHeader_starts_with?: Maybe<String>;
  subHeader_not_starts_with?: Maybe<String>;
  subHeader_ends_with?: Maybe<String>;
  subHeader_not_ends_with?: Maybe<String>;
  AND?: Maybe<MenuChoiceScalarWhereInput[] | MenuChoiceScalarWhereInput>;
  OR?: Maybe<MenuChoiceScalarWhereInput[] | MenuChoiceScalarWhereInput>;
  NOT?: Maybe<MenuChoiceScalarWhereInput[] | MenuChoiceScalarWhereInput>;
}

export interface MenuChoiceUpdateManyWithWhereNestedInput {
  where: MenuChoiceScalarWhereInput;
  data: MenuChoiceUpdateManyDataInput;
}

export interface MenuChoiceUpdateManyDataInput {
  header?: Maybe<String>;
  subHeader?: Maybe<String>;
}

export interface MenuHeaderUpdateOneWithoutMenu_itemsInput {
  create?: Maybe<MenuHeaderCreateWithoutMenu_itemsInput>;
  update?: Maybe<MenuHeaderUpdateWithoutMenu_itemsDataInput>;
  upsert?: Maybe<MenuHeaderUpsertWithoutMenu_itemsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MenuHeaderWhereUniqueInput>;
}

export interface MenuHeaderUpdateWithoutMenu_itemsDataInput {
  name?: Maybe<String>;
  subHeader?: Maybe<String>;
  menu?: Maybe<MenuUpdateOneInput>;
}

export interface MenuUpdateOneInput {
  create?: Maybe<MenuCreateInput>;
  update?: Maybe<MenuUpdateDataInput>;
  upsert?: Maybe<MenuUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MenuWhereUniqueInput>;
}

export interface MenuUpdateDataInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  menu_items?: Maybe<MenuItemUpdateManyWithoutMenuInput>;
  organization?: Maybe<OrganizationUpdateOneRequiredWithoutMenusInput>;
}

export interface OrganizationUpdateOneRequiredWithoutMenusInput {
  create?: Maybe<OrganizationCreateWithoutMenusInput>;
  update?: Maybe<OrganizationUpdateWithoutMenusDataInput>;
  upsert?: Maybe<OrganizationUpsertWithoutMenusInput>;
  connect?: Maybe<OrganizationWhereUniqueInput>;
}

export interface OrganizationUpdateWithoutMenusDataInput {
  name?: Maybe<String>;
  users?: Maybe<UserUpdateManyInput>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutOrganizationsInput>;
}

export interface UserUpdateOneRequiredWithoutOrganizationsInput {
  create?: Maybe<UserCreateWithoutOrganizationsInput>;
  update?: Maybe<UserUpdateWithoutOrganizationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutOrganizationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutOrganizationsDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  table?: Maybe<TableUpdateOneWithoutCustomersInput>;
  cart?: Maybe<CartUpdateOneWithoutCustomerInput>;
  orders?: Maybe<OrderUpdateManyWithoutCustomerInput>;
  permissions?: Maybe<Permission>;
}

export interface TableUpdateOneWithoutCustomersInput {
  create?: Maybe<TableCreateWithoutCustomersInput>;
  update?: Maybe<TableUpdateWithoutCustomersDataInput>;
  upsert?: Maybe<TableUpsertWithoutCustomersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TableWhereUniqueInput>;
}

export interface TableUpdateWithoutCustomersDataInput {
  carts?: Maybe<CartUpdateManyWithoutTableInput>;
}

export interface CartUpdateManyWithoutTableInput {
  create?: Maybe<CartCreateWithoutTableInput[] | CartCreateWithoutTableInput>;
  delete?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  connect?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  set?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  disconnect?: Maybe<CartWhereUniqueInput[] | CartWhereUniqueInput>;
  update?: Maybe<
    | CartUpdateWithWhereUniqueWithoutTableInput[]
    | CartUpdateWithWhereUniqueWithoutTableInput
  >;
  upsert?: Maybe<
    | CartUpsertWithWhereUniqueWithoutTableInput[]
    | CartUpsertWithWhereUniqueWithoutTableInput
  >;
  deleteMany?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
  updateMany?: Maybe<
    CartUpdateManyWithWhereNestedInput[] | CartUpdateManyWithWhereNestedInput
  >;
}

export interface CartUpdateWithWhereUniqueWithoutTableInput {
  where: CartWhereUniqueInput;
  data: CartUpdateWithoutTableDataInput;
}

export interface CartUpdateWithoutTableDataInput {
  orders?: Maybe<OrderUpdateManyInput>;
  customer?: Maybe<UserUpdateOneRequiredWithoutCartInput>;
  total?: Maybe<Int>;
}

export interface UserUpdateOneRequiredWithoutCartInput {
  create?: Maybe<UserCreateWithoutCartInput>;
  update?: Maybe<UserUpdateWithoutCartDataInput>;
  upsert?: Maybe<UserUpsertWithoutCartInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCartDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutCreatedByInput>;
  table?: Maybe<TableUpdateOneWithoutCustomersInput>;
  orders?: Maybe<OrderUpdateManyWithoutCustomerInput>;
  permissions?: Maybe<Permission>;
}

export interface OrderUpdateManyWithoutCustomerInput {
  create?: Maybe<
    OrderCreateWithoutCustomerInput[] | OrderCreateWithoutCustomerInput
  >;
  delete?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  set?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  disconnect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  update?: Maybe<
    | OrderUpdateWithWhereUniqueWithoutCustomerInput[]
    | OrderUpdateWithWhereUniqueWithoutCustomerInput
  >;
  upsert?: Maybe<
    | OrderUpsertWithWhereUniqueWithoutCustomerInput[]
    | OrderUpsertWithWhereUniqueWithoutCustomerInput
  >;
  deleteMany?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  updateMany?: Maybe<
    OrderUpdateManyWithWhereNestedInput[] | OrderUpdateManyWithWhereNestedInput
  >;
}

export interface OrderUpdateWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutCustomerDataInput;
}

export interface OrderUpdateWithoutCustomerDataInput {
  items?: Maybe<OrderItemUpdateManyInput>;
  total?: Maybe<Int>;
  charge?: Maybe<String>;
}

export interface OrderUpsertWithWhereUniqueWithoutCustomerInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutCustomerDataInput;
  create: OrderCreateWithoutCustomerInput;
}

export interface OrderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  total?: Maybe<Int>;
  total_not?: Maybe<Int>;
  total_in?: Maybe<Int[] | Int>;
  total_not_in?: Maybe<Int[] | Int>;
  total_lt?: Maybe<Int>;
  total_lte?: Maybe<Int>;
  total_gt?: Maybe<Int>;
  total_gte?: Maybe<Int>;
  charge?: Maybe<String>;
  charge_not?: Maybe<String>;
  charge_in?: Maybe<String[] | String>;
  charge_not_in?: Maybe<String[] | String>;
  charge_lt?: Maybe<String>;
  charge_lte?: Maybe<String>;
  charge_gt?: Maybe<String>;
  charge_gte?: Maybe<String>;
  charge_contains?: Maybe<String>;
  charge_not_contains?: Maybe<String>;
  charge_starts_with?: Maybe<String>;
  charge_not_starts_with?: Maybe<String>;
  charge_ends_with?: Maybe<String>;
  charge_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  OR?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  NOT?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
}

export interface OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput;
  data: OrderUpdateManyDataInput;
}

export interface OrderUpdateManyDataInput {
  total?: Maybe<Int>;
  charge?: Maybe<String>;
}

export interface UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput;
  create: UserCreateWithoutCartInput;
}

export interface CartUpsertWithWhereUniqueWithoutTableInput {
  where: CartWhereUniqueInput;
  update: CartUpdateWithoutTableDataInput;
  create: CartCreateWithoutTableInput;
}

export interface CartScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  total?: Maybe<Int>;
  total_not?: Maybe<Int>;
  total_in?: Maybe<Int[] | Int>;
  total_not_in?: Maybe<Int[] | Int>;
  total_lt?: Maybe<Int>;
  total_lte?: Maybe<Int>;
  total_gt?: Maybe<Int>;
  total_gte?: Maybe<Int>;
  AND?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
  OR?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
  NOT?: Maybe<CartScalarWhereInput[] | CartScalarWhereInput>;
}

export interface CartUpdateManyWithWhereNestedInput {
  where: CartScalarWhereInput;
  data: CartUpdateManyDataInput;
}

export interface CartUpdateManyDataInput {
  total?: Maybe<Int>;
}

export interface TableUpsertWithoutCustomersInput {
  update: TableUpdateWithoutCustomersDataInput;
  create: TableCreateWithoutCustomersInput;
}

export interface CartUpdateOneWithoutCustomerInput {
  create?: Maybe<CartCreateWithoutCustomerInput>;
  update?: Maybe<CartUpdateWithoutCustomerDataInput>;
  upsert?: Maybe<CartUpsertWithoutCustomerInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CartWhereUniqueInput>;
}

export interface CartUpdateWithoutCustomerDataInput {
  orders?: Maybe<OrderUpdateManyInput>;
  table?: Maybe<TableUpdateOneWithoutCartsInput>;
  total?: Maybe<Int>;
}

export interface TableUpdateOneWithoutCartsInput {
  create?: Maybe<TableCreateWithoutCartsInput>;
  update?: Maybe<TableUpdateWithoutCartsDataInput>;
  upsert?: Maybe<TableUpsertWithoutCartsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TableWhereUniqueInput>;
}

export interface TableUpdateWithoutCartsDataInput {
  customers?: Maybe<UserUpdateManyWithoutTableInput>;
}

export interface UserUpdateManyWithoutTableInput {
  create?: Maybe<UserCreateWithoutTableInput[] | UserCreateWithoutTableInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutTableInput[]
    | UserUpdateWithWhereUniqueWithoutTableInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutTableInput[]
    | UserUpsertWithWhereUniqueWithoutTableInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutTableInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutTableDataInput;
}

export interface UserUpdateWithoutTableDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutCreatedByInput>;
  cart?: Maybe<CartUpdateOneWithoutCustomerInput>;
  orders?: Maybe<OrderUpdateManyWithoutCustomerInput>;
  permissions?: Maybe<Permission>;
}

export interface UserUpsertWithWhereUniqueWithoutTableInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutTableDataInput;
  create: UserCreateWithoutTableInput;
}

export interface TableUpsertWithoutCartsInput {
  update: TableUpdateWithoutCartsDataInput;
  create: TableCreateWithoutCartsInput;
}

export interface CartUpsertWithoutCustomerInput {
  update: CartUpdateWithoutCustomerDataInput;
  create: CartCreateWithoutCustomerInput;
}

export interface UserUpsertWithoutOrganizationsInput {
  update: UserUpdateWithoutOrganizationsDataInput;
  create: UserCreateWithoutOrganizationsInput;
}

export interface OrganizationUpsertWithoutMenusInput {
  update: OrganizationUpdateWithoutMenusDataInput;
  create: OrganizationCreateWithoutMenusInput;
}

export interface MenuUpsertNestedInput {
  update: MenuUpdateDataInput;
  create: MenuCreateInput;
}

export interface MenuHeaderUpsertWithoutMenu_itemsInput {
  update: MenuHeaderUpdateWithoutMenu_itemsDataInput;
  create: MenuHeaderCreateWithoutMenu_itemsInput;
}

export interface MenuItemUpsertWithWhereUniqueWithoutMenuInput {
  where: MenuItemWhereUniqueInput;
  update: MenuItemUpdateWithoutMenuDataInput;
  create: MenuItemCreateWithoutMenuInput;
}

export interface MenuItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  basePrice?: Maybe<String>;
  basePrice_not?: Maybe<String>;
  basePrice_in?: Maybe<String[] | String>;
  basePrice_not_in?: Maybe<String[] | String>;
  basePrice_lt?: Maybe<String>;
  basePrice_lte?: Maybe<String>;
  basePrice_gt?: Maybe<String>;
  basePrice_gte?: Maybe<String>;
  basePrice_contains?: Maybe<String>;
  basePrice_not_contains?: Maybe<String>;
  basePrice_starts_with?: Maybe<String>;
  basePrice_not_starts_with?: Maybe<String>;
  basePrice_ends_with?: Maybe<String>;
  basePrice_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  largeImage?: Maybe<String>;
  largeImage_not?: Maybe<String>;
  largeImage_in?: Maybe<String[] | String>;
  largeImage_not_in?: Maybe<String[] | String>;
  largeImage_lt?: Maybe<String>;
  largeImage_lte?: Maybe<String>;
  largeImage_gt?: Maybe<String>;
  largeImage_gte?: Maybe<String>;
  largeImage_contains?: Maybe<String>;
  largeImage_not_contains?: Maybe<String>;
  largeImage_starts_with?: Maybe<String>;
  largeImage_not_starts_with?: Maybe<String>;
  largeImage_ends_with?: Maybe<String>;
  largeImage_not_ends_with?: Maybe<String>;
  AND?: Maybe<MenuItemScalarWhereInput[] | MenuItemScalarWhereInput>;
  OR?: Maybe<MenuItemScalarWhereInput[] | MenuItemScalarWhereInput>;
  NOT?: Maybe<MenuItemScalarWhereInput[] | MenuItemScalarWhereInput>;
}

export interface MenuItemUpdateManyWithWhereNestedInput {
  where: MenuItemScalarWhereInput;
  data: MenuItemUpdateManyDataInput;
}

export interface MenuItemUpdateManyDataInput {
  basePrice?: Maybe<String>;
  description?: Maybe<String>;
  name?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
}

export interface MenuUpsertWithWhereUniqueWithoutOrganizationInput {
  where: MenuWhereUniqueInput;
  update: MenuUpdateWithoutOrganizationDataInput;
  create: MenuCreateWithoutOrganizationInput;
}

export interface MenuScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<MenuScalarWhereInput[] | MenuScalarWhereInput>;
  OR?: Maybe<MenuScalarWhereInput[] | MenuScalarWhereInput>;
  NOT?: Maybe<MenuScalarWhereInput[] | MenuScalarWhereInput>;
}

export interface MenuUpdateManyWithWhereNestedInput {
  where: MenuScalarWhereInput;
  data: MenuUpdateManyDataInput;
}

export interface MenuUpdateManyDataInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
}

export interface OrganizationUpsertWithWhereUniqueWithoutCreatedByInput {
  where: OrganizationWhereUniqueInput;
  update: OrganizationUpdateWithoutCreatedByDataInput;
  create: OrganizationCreateWithoutCreatedByInput;
}

export interface OrganizationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<OrganizationScalarWhereInput[] | OrganizationScalarWhereInput>;
  OR?: Maybe<OrganizationScalarWhereInput[] | OrganizationScalarWhereInput>;
  NOT?: Maybe<OrganizationScalarWhereInput[] | OrganizationScalarWhereInput>;
}

export interface OrganizationUpdateManyWithWhereNestedInput {
  where: OrganizationScalarWhereInput;
  data: OrganizationUpdateManyDataInput;
}

export interface OrganizationUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface OrderItemUpsertWithWhereUniqueNestedInput {
  where: OrderItemWhereUniqueInput;
  update: OrderItemUpdateDataInput;
  create: OrderItemCreateInput;
}

export interface OrderItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  AND?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
  OR?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
  NOT?: Maybe<OrderItemScalarWhereInput[] | OrderItemScalarWhereInput>;
}

export interface OrderItemUpdateManyWithWhereNestedInput {
  where: OrderItemScalarWhereInput;
  data: OrderItemUpdateManyDataInput;
}

export interface OrderItemUpdateManyDataInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
  quantity?: Maybe<Int>;
}

export interface UserUpdateOneRequiredWithoutOrdersInput {
  create?: Maybe<UserCreateWithoutOrdersInput>;
  update?: Maybe<UserUpdateWithoutOrdersDataInput>;
  upsert?: Maybe<UserUpsertWithoutOrdersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutOrdersDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutCreatedByInput>;
  table?: Maybe<TableUpdateOneWithoutCustomersInput>;
  cart?: Maybe<CartUpdateOneWithoutCustomerInput>;
  permissions?: Maybe<Permission>;
}

export interface UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput;
  create: UserCreateWithoutOrdersInput;
}

export interface OrderUpsertWithWhereUniqueNestedInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateDataInput;
  create: OrderCreateInput;
}

export interface CartUpdateManyMutationInput {
  total?: Maybe<Int>;
}

export interface MenuUpdateInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  menu_items?: Maybe<MenuItemUpdateManyWithoutMenuInput>;
  organization?: Maybe<OrganizationUpdateOneRequiredWithoutMenusInput>;
}

export interface MenuUpdateManyMutationInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
}

export interface MenuChoiceCreateInput {
  id?: Maybe<ID_Input>;
  header: String;
  subHeader?: Maybe<String>;
  selections?: Maybe<MenuSelectionCreateManyWithoutOptionInput>;
  menu_items?: Maybe<MenuItemCreateManyWithoutOptionsInput>;
}

export interface MenuItemCreateManyWithoutOptionsInput {
  create?: Maybe<
    MenuItemCreateWithoutOptionsInput[] | MenuItemCreateWithoutOptionsInput
  >;
  connect?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
}

export interface MenuItemCreateWithoutOptionsInput {
  id?: Maybe<ID_Input>;
  basePrice: String;
  description?: Maybe<String>;
  menu?: Maybe<MenuCreateOneWithoutMenu_itemsInput>;
  name: String;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  menuHeader?: Maybe<MenuHeaderCreateOneWithoutMenu_itemsInput>;
}

export interface MenuCreateOneWithoutMenu_itemsInput {
  create?: Maybe<MenuCreateWithoutMenu_itemsInput>;
  connect?: Maybe<MenuWhereUniqueInput>;
}

export interface MenuCreateWithoutMenu_itemsInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  title: String;
  organization: OrganizationCreateOneWithoutMenusInput;
}

export interface MenuChoiceUpdateInput {
  header?: Maybe<String>;
  subHeader?: Maybe<String>;
  selections?: Maybe<MenuSelectionUpdateManyWithoutOptionInput>;
  menu_items?: Maybe<MenuItemUpdateManyWithoutOptionsInput>;
}

export interface MenuItemUpdateManyWithoutOptionsInput {
  create?: Maybe<
    MenuItemCreateWithoutOptionsInput[] | MenuItemCreateWithoutOptionsInput
  >;
  delete?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
  connect?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
  set?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
  disconnect?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
  update?: Maybe<
    | MenuItemUpdateWithWhereUniqueWithoutOptionsInput[]
    | MenuItemUpdateWithWhereUniqueWithoutOptionsInput
  >;
  upsert?: Maybe<
    | MenuItemUpsertWithWhereUniqueWithoutOptionsInput[]
    | MenuItemUpsertWithWhereUniqueWithoutOptionsInput
  >;
  deleteMany?: Maybe<MenuItemScalarWhereInput[] | MenuItemScalarWhereInput>;
  updateMany?: Maybe<
    | MenuItemUpdateManyWithWhereNestedInput[]
    | MenuItemUpdateManyWithWhereNestedInput
  >;
}

export interface MenuItemUpdateWithWhereUniqueWithoutOptionsInput {
  where: MenuItemWhereUniqueInput;
  data: MenuItemUpdateWithoutOptionsDataInput;
}

export interface MenuItemUpdateWithoutOptionsDataInput {
  basePrice?: Maybe<String>;
  description?: Maybe<String>;
  menu?: Maybe<MenuUpdateOneWithoutMenu_itemsInput>;
  name?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  menuHeader?: Maybe<MenuHeaderUpdateOneWithoutMenu_itemsInput>;
}

export interface MenuUpdateOneWithoutMenu_itemsInput {
  create?: Maybe<MenuCreateWithoutMenu_itemsInput>;
  update?: Maybe<MenuUpdateWithoutMenu_itemsDataInput>;
  upsert?: Maybe<MenuUpsertWithoutMenu_itemsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MenuWhereUniqueInput>;
}

export interface MenuUpdateWithoutMenu_itemsDataInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  organization?: Maybe<OrganizationUpdateOneRequiredWithoutMenusInput>;
}

export interface MenuUpsertWithoutMenu_itemsInput {
  update: MenuUpdateWithoutMenu_itemsDataInput;
  create: MenuCreateWithoutMenu_itemsInput;
}

export interface MenuItemUpsertWithWhereUniqueWithoutOptionsInput {
  where: MenuItemWhereUniqueInput;
  update: MenuItemUpdateWithoutOptionsDataInput;
  create: MenuItemCreateWithoutOptionsInput;
}

export interface MenuChoiceUpdateManyMutationInput {
  header?: Maybe<String>;
  subHeader?: Maybe<String>;
}

export interface MenuHeaderCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  subHeader?: Maybe<String>;
  menu_items?: Maybe<MenuItemCreateManyWithoutMenuHeaderInput>;
  menu?: Maybe<MenuCreateOneInput>;
}

export interface MenuItemCreateManyWithoutMenuHeaderInput {
  create?: Maybe<
    | MenuItemCreateWithoutMenuHeaderInput[]
    | MenuItemCreateWithoutMenuHeaderInput
  >;
  connect?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
}

export interface MenuItemCreateWithoutMenuHeaderInput {
  id?: Maybe<ID_Input>;
  basePrice: String;
  description?: Maybe<String>;
  menu?: Maybe<MenuCreateOneWithoutMenu_itemsInput>;
  options?: Maybe<MenuChoiceCreateManyWithoutMenu_itemsInput>;
  name: String;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
}

export interface MenuHeaderUpdateInput {
  name?: Maybe<String>;
  subHeader?: Maybe<String>;
  menu_items?: Maybe<MenuItemUpdateManyWithoutMenuHeaderInput>;
  menu?: Maybe<MenuUpdateOneInput>;
}

export interface MenuItemUpdateManyWithoutMenuHeaderInput {
  create?: Maybe<
    | MenuItemCreateWithoutMenuHeaderInput[]
    | MenuItemCreateWithoutMenuHeaderInput
  >;
  delete?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
  connect?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
  set?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
  disconnect?: Maybe<MenuItemWhereUniqueInput[] | MenuItemWhereUniqueInput>;
  update?: Maybe<
    | MenuItemUpdateWithWhereUniqueWithoutMenuHeaderInput[]
    | MenuItemUpdateWithWhereUniqueWithoutMenuHeaderInput
  >;
  upsert?: Maybe<
    | MenuItemUpsertWithWhereUniqueWithoutMenuHeaderInput[]
    | MenuItemUpsertWithWhereUniqueWithoutMenuHeaderInput
  >;
  deleteMany?: Maybe<MenuItemScalarWhereInput[] | MenuItemScalarWhereInput>;
  updateMany?: Maybe<
    | MenuItemUpdateManyWithWhereNestedInput[]
    | MenuItemUpdateManyWithWhereNestedInput
  >;
}

export interface MenuItemUpdateWithWhereUniqueWithoutMenuHeaderInput {
  where: MenuItemWhereUniqueInput;
  data: MenuItemUpdateWithoutMenuHeaderDataInput;
}

export interface MenuItemUpdateWithoutMenuHeaderDataInput {
  basePrice?: Maybe<String>;
  description?: Maybe<String>;
  menu?: Maybe<MenuUpdateOneWithoutMenu_itemsInput>;
  options?: Maybe<MenuChoiceUpdateManyWithoutMenu_itemsInput>;
  name?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
}

export interface MenuItemUpsertWithWhereUniqueWithoutMenuHeaderInput {
  where: MenuItemWhereUniqueInput;
  update: MenuItemUpdateWithoutMenuHeaderDataInput;
  create: MenuItemCreateWithoutMenuHeaderInput;
}

export interface MenuHeaderUpdateManyMutationInput {
  name?: Maybe<String>;
  subHeader?: Maybe<String>;
}

export interface MenuItemCreateInput {
  id?: Maybe<ID_Input>;
  basePrice: String;
  description?: Maybe<String>;
  menu?: Maybe<MenuCreateOneWithoutMenu_itemsInput>;
  options?: Maybe<MenuChoiceCreateManyWithoutMenu_itemsInput>;
  name: String;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  menuHeader?: Maybe<MenuHeaderCreateOneWithoutMenu_itemsInput>;
}

export interface MenuItemUpdateInput {
  basePrice?: Maybe<String>;
  description?: Maybe<String>;
  menu?: Maybe<MenuUpdateOneWithoutMenu_itemsInput>;
  options?: Maybe<MenuChoiceUpdateManyWithoutMenu_itemsInput>;
  name?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
  menuHeader?: Maybe<MenuHeaderUpdateOneWithoutMenu_itemsInput>;
}

export interface MenuItemUpdateManyMutationInput {
  basePrice?: Maybe<String>;
  description?: Maybe<String>;
  name?: Maybe<String>;
  image?: Maybe<String>;
  largeImage?: Maybe<String>;
}

export interface MenuSelectionCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  selected?: Maybe<Boolean>;
  valueAdd?: Maybe<String>;
  option?: Maybe<MenuChoiceCreateOneWithoutSelectionsInput>;
}

export interface MenuChoiceCreateOneWithoutSelectionsInput {
  create?: Maybe<MenuChoiceCreateWithoutSelectionsInput>;
  connect?: Maybe<MenuChoiceWhereUniqueInput>;
}

export interface MenuChoiceCreateWithoutSelectionsInput {
  id?: Maybe<ID_Input>;
  header: String;
  subHeader?: Maybe<String>;
  menu_items?: Maybe<MenuItemCreateManyWithoutOptionsInput>;
}

export interface MenuSelectionUpdateInput {
  name?: Maybe<String>;
  selected?: Maybe<Boolean>;
  valueAdd?: Maybe<String>;
  option?: Maybe<MenuChoiceUpdateOneWithoutSelectionsInput>;
}

export interface MenuChoiceUpdateOneWithoutSelectionsInput {
  create?: Maybe<MenuChoiceCreateWithoutSelectionsInput>;
  update?: Maybe<MenuChoiceUpdateWithoutSelectionsDataInput>;
  upsert?: Maybe<MenuChoiceUpsertWithoutSelectionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<MenuChoiceWhereUniqueInput>;
}

export interface MenuChoiceUpdateWithoutSelectionsDataInput {
  header?: Maybe<String>;
  subHeader?: Maybe<String>;
  menu_items?: Maybe<MenuItemUpdateManyWithoutOptionsInput>;
}

export interface MenuChoiceUpsertWithoutSelectionsInput {
  update: MenuChoiceUpdateWithoutSelectionsDataInput;
  create: MenuChoiceCreateWithoutSelectionsInput;
}

export interface MenuSelectionUpdateManyMutationInput {
  name?: Maybe<String>;
  selected?: Maybe<Boolean>;
  valueAdd?: Maybe<String>;
}

export interface OrderUpdateInput {
  items?: Maybe<OrderItemUpdateManyInput>;
  total?: Maybe<Int>;
  customer?: Maybe<UserUpdateOneRequiredWithoutOrdersInput>;
  charge?: Maybe<String>;
}

export interface OrderUpdateManyMutationInput {
  total?: Maybe<Int>;
  charge?: Maybe<String>;
}

export interface OrderItemUpdateInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
  quantity?: Maybe<Int>;
  customer?: Maybe<UserUpdateOneRequiredInput>;
}

export interface OrderItemUpdateManyMutationInput {
  title?: Maybe<String>;
  price?: Maybe<Int>;
  quantity?: Maybe<Int>;
}

export interface OrganizationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  users?: Maybe<UserCreateManyInput>;
  menus?: Maybe<MenuCreateManyWithoutOrganizationInput>;
  createdBy: UserCreateOneWithoutOrganizationsInput;
}

export interface OrganizationUpdateInput {
  name?: Maybe<String>;
  users?: Maybe<UserUpdateManyInput>;
  menus?: Maybe<MenuUpdateManyWithoutOrganizationInput>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutOrganizationsInput>;
}

export interface OrganizationUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface TableCreateInput {
  id?: Maybe<ID_Input>;
  customers?: Maybe<UserCreateManyWithoutTableInput>;
  carts?: Maybe<CartCreateManyWithoutTableInput>;
}

export interface TableUpdateInput {
  customers?: Maybe<UserUpdateManyWithoutTableInput>;
  carts?: Maybe<CartUpdateManyWithoutTableInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  organizations?: Maybe<OrganizationUpdateManyWithoutCreatedByInput>;
  table?: Maybe<TableUpdateOneWithoutCustomersInput>;
  cart?: Maybe<CartUpdateOneWithoutCustomerInput>;
  orders?: Maybe<OrderUpdateManyWithoutCustomerInput>;
  permissions?: Maybe<Permission>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  password?: Maybe<String>;
  permissions?: Maybe<Permission>;
}

export interface CartSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CartWhereInput>;
  AND?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
  OR?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
  NOT?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
}

export interface MenuSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MenuWhereInput>;
  AND?: Maybe<MenuSubscriptionWhereInput[] | MenuSubscriptionWhereInput>;
  OR?: Maybe<MenuSubscriptionWhereInput[] | MenuSubscriptionWhereInput>;
  NOT?: Maybe<MenuSubscriptionWhereInput[] | MenuSubscriptionWhereInput>;
}

export interface MenuChoiceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MenuChoiceWhereInput>;
  AND?: Maybe<
    MenuChoiceSubscriptionWhereInput[] | MenuChoiceSubscriptionWhereInput
  >;
  OR?: Maybe<
    MenuChoiceSubscriptionWhereInput[] | MenuChoiceSubscriptionWhereInput
  >;
  NOT?: Maybe<
    MenuChoiceSubscriptionWhereInput[] | MenuChoiceSubscriptionWhereInput
  >;
}

export interface MenuHeaderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MenuHeaderWhereInput>;
  AND?: Maybe<
    MenuHeaderSubscriptionWhereInput[] | MenuHeaderSubscriptionWhereInput
  >;
  OR?: Maybe<
    MenuHeaderSubscriptionWhereInput[] | MenuHeaderSubscriptionWhereInput
  >;
  NOT?: Maybe<
    MenuHeaderSubscriptionWhereInput[] | MenuHeaderSubscriptionWhereInput
  >;
}

export interface MenuItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MenuItemWhereInput>;
  AND?: Maybe<
    MenuItemSubscriptionWhereInput[] | MenuItemSubscriptionWhereInput
  >;
  OR?: Maybe<MenuItemSubscriptionWhereInput[] | MenuItemSubscriptionWhereInput>;
  NOT?: Maybe<
    MenuItemSubscriptionWhereInput[] | MenuItemSubscriptionWhereInput
  >;
}

export interface MenuSelectionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MenuSelectionWhereInput>;
  AND?: Maybe<
    MenuSelectionSubscriptionWhereInput[] | MenuSelectionSubscriptionWhereInput
  >;
  OR?: Maybe<
    MenuSelectionSubscriptionWhereInput[] | MenuSelectionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    MenuSelectionSubscriptionWhereInput[] | MenuSelectionSubscriptionWhereInput
  >;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  OR?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  NOT?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface OrderItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderItemWhereInput>;
  AND?: Maybe<
    OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrderItemSubscriptionWhereInput[] | OrderItemSubscriptionWhereInput
  >;
}

export interface OrganizationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrganizationWhereInput>;
  AND?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
}

export interface TableSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TableWhereInput>;
  AND?: Maybe<TableSubscriptionWhereInput[] | TableSubscriptionWhereInput>;
  OR?: Maybe<TableSubscriptionWhereInput[] | TableSubscriptionWhereInput>;
  NOT?: Maybe<TableSubscriptionWhereInput[] | TableSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Cart {
  id: ID_Output;
  total: Int;
}

export interface CartPromise extends Promise<Cart>, Fragmentable {
  id: () => Promise<ID_Output>;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  customer: <T = UserPromise>() => T;
  table: <T = TablePromise>() => T;
  total: () => Promise<Int>;
}

export interface CartSubscription
  extends Promise<AsyncIterator<Cart>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  customer: <T = UserSubscription>() => T;
  table: <T = TableSubscription>() => T;
  total: () => Promise<AsyncIterator<Int>>;
}

export interface CartNullablePromise
  extends Promise<Cart | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  customer: <T = UserPromise>() => T;
  table: <T = TablePromise>() => T;
  total: () => Promise<Int>;
}

export interface Order {
  id: ID_Output;
  total: Int;
  charge: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  items: <T = FragmentableArray<OrderItem>>(args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  total: () => Promise<Int>;
  customer: <T = UserPromise>() => T;
  charge: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  items: <T = Promise<AsyncIterator<OrderItemSubscription>>>(args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  total: () => Promise<AsyncIterator<Int>>;
  customer: <T = UserSubscription>() => T;
  charge: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  items: <T = FragmentableArray<OrderItem>>(args?: {
    where?: OrderItemWhereInput;
    orderBy?: OrderItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  total: () => Promise<Int>;
  customer: <T = UserPromise>() => T;
  charge: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderItem {
  id: ID_Output;
  title: String;
  price: Int;
  quantity: Int;
}

export interface OrderItemPromise extends Promise<OrderItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  price: () => Promise<Int>;
  quantity: () => Promise<Int>;
  customer: <T = UserPromise>() => T;
}

export interface OrderItemSubscription
  extends Promise<AsyncIterator<OrderItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  quantity: () => Promise<AsyncIterator<Int>>;
  customer: <T = UserSubscription>() => T;
}

export interface OrderItemNullablePromise
  extends Promise<OrderItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  price: () => Promise<Int>;
  quantity: () => Promise<Int>;
  customer: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  name?: String;
  password: String;
  permissions: Permission;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  organizations: <T = FragmentableArray<Organization>>(args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  table: <T = TablePromise>() => T;
  cart: <T = CartPromise>() => T;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  permissions: () => Promise<Permission>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  organizations: <T = Promise<AsyncIterator<OrganizationSubscription>>>(args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  table: <T = TableSubscription>() => T;
  cart: <T = CartSubscription>() => T;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  permissions: () => Promise<AsyncIterator<Permission>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  organizations: <T = FragmentableArray<Organization>>(args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  table: <T = TablePromise>() => T;
  cart: <T = CartPromise>() => T;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  permissions: () => Promise<Permission>;
}

export interface Organization {
  id: ID_Output;
  name: String;
}

export interface OrganizationPromise
  extends Promise<Organization>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  menus: <T = FragmentableArray<Menu>>(args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
}

export interface OrganizationSubscription
  extends Promise<AsyncIterator<Organization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  menus: <T = Promise<AsyncIterator<MenuSubscription>>>(args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserSubscription>() => T;
}

export interface OrganizationNullablePromise
  extends Promise<Organization | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  menus: <T = FragmentableArray<Menu>>(args?: {
    where?: MenuWhereInput;
    orderBy?: MenuOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdBy: <T = UserPromise>() => T;
}

export interface Menu {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
}

export interface MenuPromise extends Promise<Menu>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  menu_items: <T = FragmentableArray<MenuItem>>(args?: {
    where?: MenuItemWhereInput;
    orderBy?: MenuItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organization: <T = OrganizationPromise>() => T;
}

export interface MenuSubscription
  extends Promise<AsyncIterator<Menu>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  menu_items: <T = Promise<AsyncIterator<MenuItemSubscription>>>(args?: {
    where?: MenuItemWhereInput;
    orderBy?: MenuItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organization: <T = OrganizationSubscription>() => T;
}

export interface MenuNullablePromise
  extends Promise<Menu | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  menu_items: <T = FragmentableArray<MenuItem>>(args?: {
    where?: MenuItemWhereInput;
    orderBy?: MenuItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  organization: <T = OrganizationPromise>() => T;
}

export interface MenuItem {
  id: ID_Output;
  basePrice: String;
  description?: String;
  name: String;
  image?: String;
  largeImage?: String;
}

export interface MenuItemPromise extends Promise<MenuItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  basePrice: () => Promise<String>;
  description: () => Promise<String>;
  menu: <T = MenuPromise>() => T;
  options: <T = FragmentableArray<MenuChoice>>(args?: {
    where?: MenuChoiceWhereInput;
    orderBy?: MenuChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  menuHeader: <T = MenuHeaderPromise>() => T;
}

export interface MenuItemSubscription
  extends Promise<AsyncIterator<MenuItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  basePrice: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  menu: <T = MenuSubscription>() => T;
  options: <T = Promise<AsyncIterator<MenuChoiceSubscription>>>(args?: {
    where?: MenuChoiceWhereInput;
    orderBy?: MenuChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
  menuHeader: <T = MenuHeaderSubscription>() => T;
}

export interface MenuItemNullablePromise
  extends Promise<MenuItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  basePrice: () => Promise<String>;
  description: () => Promise<String>;
  menu: <T = MenuPromise>() => T;
  options: <T = FragmentableArray<MenuChoice>>(args?: {
    where?: MenuChoiceWhereInput;
    orderBy?: MenuChoiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  menuHeader: <T = MenuHeaderPromise>() => T;
}

export interface MenuChoice {
  id: ID_Output;
  header: String;
  subHeader?: String;
}

export interface MenuChoicePromise extends Promise<MenuChoice>, Fragmentable {
  id: () => Promise<ID_Output>;
  header: () => Promise<String>;
  subHeader: () => Promise<String>;
  selections: <T = FragmentableArray<MenuSelection>>(args?: {
    where?: MenuSelectionWhereInput;
    orderBy?: MenuSelectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  menu_items: <T = FragmentableArray<MenuItem>>(args?: {
    where?: MenuItemWhereInput;
    orderBy?: MenuItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MenuChoiceSubscription
  extends Promise<AsyncIterator<MenuChoice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  header: () => Promise<AsyncIterator<String>>;
  subHeader: () => Promise<AsyncIterator<String>>;
  selections: <T = Promise<AsyncIterator<MenuSelectionSubscription>>>(args?: {
    where?: MenuSelectionWhereInput;
    orderBy?: MenuSelectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  menu_items: <T = Promise<AsyncIterator<MenuItemSubscription>>>(args?: {
    where?: MenuItemWhereInput;
    orderBy?: MenuItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MenuChoiceNullablePromise
  extends Promise<MenuChoice | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  header: () => Promise<String>;
  subHeader: () => Promise<String>;
  selections: <T = FragmentableArray<MenuSelection>>(args?: {
    where?: MenuSelectionWhereInput;
    orderBy?: MenuSelectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  menu_items: <T = FragmentableArray<MenuItem>>(args?: {
    where?: MenuItemWhereInput;
    orderBy?: MenuItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MenuSelection {
  id: ID_Output;
  name: String;
  selected?: Boolean;
  valueAdd?: String;
}

export interface MenuSelectionPromise
  extends Promise<MenuSelection>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  selected: () => Promise<Boolean>;
  valueAdd: () => Promise<String>;
  option: <T = MenuChoicePromise>() => T;
}

export interface MenuSelectionSubscription
  extends Promise<AsyncIterator<MenuSelection>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  selected: () => Promise<AsyncIterator<Boolean>>;
  valueAdd: () => Promise<AsyncIterator<String>>;
  option: <T = MenuChoiceSubscription>() => T;
}

export interface MenuSelectionNullablePromise
  extends Promise<MenuSelection | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  selected: () => Promise<Boolean>;
  valueAdd: () => Promise<String>;
  option: <T = MenuChoicePromise>() => T;
}

export interface MenuHeader {
  id: ID_Output;
  name: String;
  subHeader?: String;
}

export interface MenuHeaderPromise extends Promise<MenuHeader>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  subHeader: () => Promise<String>;
  menu_items: <T = FragmentableArray<MenuItem>>(args?: {
    where?: MenuItemWhereInput;
    orderBy?: MenuItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  menu: <T = MenuPromise>() => T;
}

export interface MenuHeaderSubscription
  extends Promise<AsyncIterator<MenuHeader>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  subHeader: () => Promise<AsyncIterator<String>>;
  menu_items: <T = Promise<AsyncIterator<MenuItemSubscription>>>(args?: {
    where?: MenuItemWhereInput;
    orderBy?: MenuItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  menu: <T = MenuSubscription>() => T;
}

export interface MenuHeaderNullablePromise
  extends Promise<MenuHeader | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  subHeader: () => Promise<String>;
  menu_items: <T = FragmentableArray<MenuItem>>(args?: {
    where?: MenuItemWhereInput;
    orderBy?: MenuItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  menu: <T = MenuPromise>() => T;
}

export interface Table {
  id: ID_Output;
}

export interface TablePromise extends Promise<Table>, Fragmentable {
  id: () => Promise<ID_Output>;
  customers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  carts: <T = FragmentableArray<Cart>>(args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TableSubscription
  extends Promise<AsyncIterator<Table>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  customers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  carts: <T = Promise<AsyncIterator<CartSubscription>>>(args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TableNullablePromise
  extends Promise<Table | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  customers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  carts: <T = FragmentableArray<Cart>>(args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CartConnection {
  pageInfo: PageInfo;
  edges: CartEdge[];
}

export interface CartConnectionPromise
  extends Promise<CartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartEdge>>() => T;
  aggregate: <T = AggregateCartPromise>() => T;
}

export interface CartConnectionSubscription
  extends Promise<AsyncIterator<CartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CartEdge {
  node: Cart;
  cursor: String;
}

export interface CartEdgePromise extends Promise<CartEdge>, Fragmentable {
  node: <T = CartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartEdgeSubscription
  extends Promise<AsyncIterator<CartEdge>>,
    Fragmentable {
  node: <T = CartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCart {
  count: Int;
}

export interface AggregateCartPromise
  extends Promise<AggregateCart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartSubscription
  extends Promise<AsyncIterator<AggregateCart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MenuConnection {
  pageInfo: PageInfo;
  edges: MenuEdge[];
}

export interface MenuConnectionPromise
  extends Promise<MenuConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MenuEdge>>() => T;
  aggregate: <T = AggregateMenuPromise>() => T;
}

export interface MenuConnectionSubscription
  extends Promise<AsyncIterator<MenuConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MenuEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMenuSubscription>() => T;
}

export interface MenuEdge {
  node: Menu;
  cursor: String;
}

export interface MenuEdgePromise extends Promise<MenuEdge>, Fragmentable {
  node: <T = MenuPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MenuEdgeSubscription
  extends Promise<AsyncIterator<MenuEdge>>,
    Fragmentable {
  node: <T = MenuSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMenu {
  count: Int;
}

export interface AggregateMenuPromise
  extends Promise<AggregateMenu>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMenuSubscription
  extends Promise<AsyncIterator<AggregateMenu>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MenuChoiceConnection {
  pageInfo: PageInfo;
  edges: MenuChoiceEdge[];
}

export interface MenuChoiceConnectionPromise
  extends Promise<MenuChoiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MenuChoiceEdge>>() => T;
  aggregate: <T = AggregateMenuChoicePromise>() => T;
}

export interface MenuChoiceConnectionSubscription
  extends Promise<AsyncIterator<MenuChoiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MenuChoiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMenuChoiceSubscription>() => T;
}

export interface MenuChoiceEdge {
  node: MenuChoice;
  cursor: String;
}

export interface MenuChoiceEdgePromise
  extends Promise<MenuChoiceEdge>,
    Fragmentable {
  node: <T = MenuChoicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MenuChoiceEdgeSubscription
  extends Promise<AsyncIterator<MenuChoiceEdge>>,
    Fragmentable {
  node: <T = MenuChoiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMenuChoice {
  count: Int;
}

export interface AggregateMenuChoicePromise
  extends Promise<AggregateMenuChoice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMenuChoiceSubscription
  extends Promise<AsyncIterator<AggregateMenuChoice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MenuHeaderConnection {
  pageInfo: PageInfo;
  edges: MenuHeaderEdge[];
}

export interface MenuHeaderConnectionPromise
  extends Promise<MenuHeaderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MenuHeaderEdge>>() => T;
  aggregate: <T = AggregateMenuHeaderPromise>() => T;
}

export interface MenuHeaderConnectionSubscription
  extends Promise<AsyncIterator<MenuHeaderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MenuHeaderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMenuHeaderSubscription>() => T;
}

export interface MenuHeaderEdge {
  node: MenuHeader;
  cursor: String;
}

export interface MenuHeaderEdgePromise
  extends Promise<MenuHeaderEdge>,
    Fragmentable {
  node: <T = MenuHeaderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MenuHeaderEdgeSubscription
  extends Promise<AsyncIterator<MenuHeaderEdge>>,
    Fragmentable {
  node: <T = MenuHeaderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMenuHeader {
  count: Int;
}

export interface AggregateMenuHeaderPromise
  extends Promise<AggregateMenuHeader>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMenuHeaderSubscription
  extends Promise<AsyncIterator<AggregateMenuHeader>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MenuItemConnection {
  pageInfo: PageInfo;
  edges: MenuItemEdge[];
}

export interface MenuItemConnectionPromise
  extends Promise<MenuItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MenuItemEdge>>() => T;
  aggregate: <T = AggregateMenuItemPromise>() => T;
}

export interface MenuItemConnectionSubscription
  extends Promise<AsyncIterator<MenuItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MenuItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMenuItemSubscription>() => T;
}

export interface MenuItemEdge {
  node: MenuItem;
  cursor: String;
}

export interface MenuItemEdgePromise
  extends Promise<MenuItemEdge>,
    Fragmentable {
  node: <T = MenuItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MenuItemEdgeSubscription
  extends Promise<AsyncIterator<MenuItemEdge>>,
    Fragmentable {
  node: <T = MenuItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMenuItem {
  count: Int;
}

export interface AggregateMenuItemPromise
  extends Promise<AggregateMenuItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMenuItemSubscription
  extends Promise<AsyncIterator<AggregateMenuItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MenuSelectionConnection {
  pageInfo: PageInfo;
  edges: MenuSelectionEdge[];
}

export interface MenuSelectionConnectionPromise
  extends Promise<MenuSelectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MenuSelectionEdge>>() => T;
  aggregate: <T = AggregateMenuSelectionPromise>() => T;
}

export interface MenuSelectionConnectionSubscription
  extends Promise<AsyncIterator<MenuSelectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MenuSelectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMenuSelectionSubscription>() => T;
}

export interface MenuSelectionEdge {
  node: MenuSelection;
  cursor: String;
}

export interface MenuSelectionEdgePromise
  extends Promise<MenuSelectionEdge>,
    Fragmentable {
  node: <T = MenuSelectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MenuSelectionEdgeSubscription
  extends Promise<AsyncIterator<MenuSelectionEdge>>,
    Fragmentable {
  node: <T = MenuSelectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMenuSelection {
  count: Int;
}

export interface AggregateMenuSelectionPromise
  extends Promise<AggregateMenuSelection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMenuSelectionSubscription
  extends Promise<AsyncIterator<AggregateMenuSelection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderItemConnection {
  pageInfo: PageInfo;
  edges: OrderItemEdge[];
}

export interface OrderItemConnectionPromise
  extends Promise<OrderItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderItemEdge>>() => T;
  aggregate: <T = AggregateOrderItemPromise>() => T;
}

export interface OrderItemConnectionSubscription
  extends Promise<AsyncIterator<OrderItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderItemSubscription>() => T;
}

export interface OrderItemEdge {
  node: OrderItem;
  cursor: String;
}

export interface OrderItemEdgePromise
  extends Promise<OrderItemEdge>,
    Fragmentable {
  node: <T = OrderItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderItemEdgeSubscription
  extends Promise<AsyncIterator<OrderItemEdge>>,
    Fragmentable {
  node: <T = OrderItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrderItem {
  count: Int;
}

export interface AggregateOrderItemPromise
  extends Promise<AggregateOrderItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderItemSubscription
  extends Promise<AsyncIterator<AggregateOrderItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrganizationConnection {
  pageInfo: PageInfo;
  edges: OrganizationEdge[];
}

export interface OrganizationConnectionPromise
  extends Promise<OrganizationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrganizationEdge>>() => T;
  aggregate: <T = AggregateOrganizationPromise>() => T;
}

export interface OrganizationConnectionSubscription
  extends Promise<AsyncIterator<OrganizationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrganizationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrganizationSubscription>() => T;
}

export interface OrganizationEdge {
  node: Organization;
  cursor: String;
}

export interface OrganizationEdgePromise
  extends Promise<OrganizationEdge>,
    Fragmentable {
  node: <T = OrganizationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrganizationEdgeSubscription
  extends Promise<AsyncIterator<OrganizationEdge>>,
    Fragmentable {
  node: <T = OrganizationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrganization {
  count: Int;
}

export interface AggregateOrganizationPromise
  extends Promise<AggregateOrganization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrganizationSubscription
  extends Promise<AsyncIterator<AggregateOrganization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TableConnection {
  pageInfo: PageInfo;
  edges: TableEdge[];
}

export interface TableConnectionPromise
  extends Promise<TableConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TableEdge>>() => T;
  aggregate: <T = AggregateTablePromise>() => T;
}

export interface TableConnectionSubscription
  extends Promise<AsyncIterator<TableConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TableEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTableSubscription>() => T;
}

export interface TableEdge {
  node: Table;
  cursor: String;
}

export interface TableEdgePromise extends Promise<TableEdge>, Fragmentable {
  node: <T = TablePromise>() => T;
  cursor: () => Promise<String>;
}

export interface TableEdgeSubscription
  extends Promise<AsyncIterator<TableEdge>>,
    Fragmentable {
  node: <T = TableSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTable {
  count: Int;
}

export interface AggregateTablePromise
  extends Promise<AggregateTable>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTableSubscription
  extends Promise<AsyncIterator<AggregateTable>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CartSubscriptionPayload {
  mutation: MutationType;
  node: Cart;
  updatedFields: String[];
  previousValues: CartPreviousValues;
}

export interface CartSubscriptionPayloadPromise
  extends Promise<CartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartPreviousValuesPromise>() => T;
}

export interface CartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartPreviousValuesSubscription>() => T;
}

export interface CartPreviousValues {
  id: ID_Output;
  total: Int;
}

export interface CartPreviousValuesPromise
  extends Promise<CartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  total: () => Promise<Int>;
}

export interface CartPreviousValuesSubscription
  extends Promise<AsyncIterator<CartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  total: () => Promise<AsyncIterator<Int>>;
}

export interface MenuSubscriptionPayload {
  mutation: MutationType;
  node: Menu;
  updatedFields: String[];
  previousValues: MenuPreviousValues;
}

export interface MenuSubscriptionPayloadPromise
  extends Promise<MenuSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MenuPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MenuPreviousValuesPromise>() => T;
}

export interface MenuSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MenuSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MenuSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MenuPreviousValuesSubscription>() => T;
}

export interface MenuPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
}

export interface MenuPreviousValuesPromise
  extends Promise<MenuPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
}

export interface MenuPreviousValuesSubscription
  extends Promise<AsyncIterator<MenuPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface MenuChoiceSubscriptionPayload {
  mutation: MutationType;
  node: MenuChoice;
  updatedFields: String[];
  previousValues: MenuChoicePreviousValues;
}

export interface MenuChoiceSubscriptionPayloadPromise
  extends Promise<MenuChoiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MenuChoicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MenuChoicePreviousValuesPromise>() => T;
}

export interface MenuChoiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MenuChoiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MenuChoiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MenuChoicePreviousValuesSubscription>() => T;
}

export interface MenuChoicePreviousValues {
  id: ID_Output;
  header: String;
  subHeader?: String;
}

export interface MenuChoicePreviousValuesPromise
  extends Promise<MenuChoicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  header: () => Promise<String>;
  subHeader: () => Promise<String>;
}

export interface MenuChoicePreviousValuesSubscription
  extends Promise<AsyncIterator<MenuChoicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  header: () => Promise<AsyncIterator<String>>;
  subHeader: () => Promise<AsyncIterator<String>>;
}

export interface MenuHeaderSubscriptionPayload {
  mutation: MutationType;
  node: MenuHeader;
  updatedFields: String[];
  previousValues: MenuHeaderPreviousValues;
}

export interface MenuHeaderSubscriptionPayloadPromise
  extends Promise<MenuHeaderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MenuHeaderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MenuHeaderPreviousValuesPromise>() => T;
}

export interface MenuHeaderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MenuHeaderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MenuHeaderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MenuHeaderPreviousValuesSubscription>() => T;
}

export interface MenuHeaderPreviousValues {
  id: ID_Output;
  name: String;
  subHeader?: String;
}

export interface MenuHeaderPreviousValuesPromise
  extends Promise<MenuHeaderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  subHeader: () => Promise<String>;
}

export interface MenuHeaderPreviousValuesSubscription
  extends Promise<AsyncIterator<MenuHeaderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  subHeader: () => Promise<AsyncIterator<String>>;
}

export interface MenuItemSubscriptionPayload {
  mutation: MutationType;
  node: MenuItem;
  updatedFields: String[];
  previousValues: MenuItemPreviousValues;
}

export interface MenuItemSubscriptionPayloadPromise
  extends Promise<MenuItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MenuItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MenuItemPreviousValuesPromise>() => T;
}

export interface MenuItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MenuItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MenuItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MenuItemPreviousValuesSubscription>() => T;
}

export interface MenuItemPreviousValues {
  id: ID_Output;
  basePrice: String;
  description?: String;
  name: String;
  image?: String;
  largeImage?: String;
}

export interface MenuItemPreviousValuesPromise
  extends Promise<MenuItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  basePrice: () => Promise<String>;
  description: () => Promise<String>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
}

export interface MenuItemPreviousValuesSubscription
  extends Promise<AsyncIterator<MenuItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  basePrice: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
}

export interface MenuSelectionSubscriptionPayload {
  mutation: MutationType;
  node: MenuSelection;
  updatedFields: String[];
  previousValues: MenuSelectionPreviousValues;
}

export interface MenuSelectionSubscriptionPayloadPromise
  extends Promise<MenuSelectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MenuSelectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MenuSelectionPreviousValuesPromise>() => T;
}

export interface MenuSelectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MenuSelectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MenuSelectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MenuSelectionPreviousValuesSubscription>() => T;
}

export interface MenuSelectionPreviousValues {
  id: ID_Output;
  name: String;
  selected?: Boolean;
  valueAdd?: String;
}

export interface MenuSelectionPreviousValuesPromise
  extends Promise<MenuSelectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  selected: () => Promise<Boolean>;
  valueAdd: () => Promise<String>;
}

export interface MenuSelectionPreviousValuesSubscription
  extends Promise<AsyncIterator<MenuSelectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  selected: () => Promise<AsyncIterator<Boolean>>;
  valueAdd: () => Promise<AsyncIterator<String>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  total: Int;
  charge: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  total: () => Promise<Int>;
  charge: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  total: () => Promise<AsyncIterator<Int>>;
  charge: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderItemSubscriptionPayload {
  mutation: MutationType;
  node: OrderItem;
  updatedFields: String[];
  previousValues: OrderItemPreviousValues;
}

export interface OrderItemSubscriptionPayloadPromise
  extends Promise<OrderItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderItemPreviousValuesPromise>() => T;
}

export interface OrderItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderItemPreviousValuesSubscription>() => T;
}

export interface OrderItemPreviousValues {
  id: ID_Output;
  title: String;
  price: Int;
  quantity: Int;
}

export interface OrderItemPreviousValuesPromise
  extends Promise<OrderItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  price: () => Promise<Int>;
  quantity: () => Promise<Int>;
}

export interface OrderItemPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface OrganizationSubscriptionPayload {
  mutation: MutationType;
  node: Organization;
  updatedFields: String[];
  previousValues: OrganizationPreviousValues;
}

export interface OrganizationSubscriptionPayloadPromise
  extends Promise<OrganizationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrganizationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrganizationPreviousValuesPromise>() => T;
}

export interface OrganizationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganizationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrganizationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrganizationPreviousValuesSubscription>() => T;
}

export interface OrganizationPreviousValues {
  id: ID_Output;
  name: String;
}

export interface OrganizationPreviousValuesPromise
  extends Promise<OrganizationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface OrganizationPreviousValuesSubscription
  extends Promise<AsyncIterator<OrganizationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TableSubscriptionPayload {
  mutation: MutationType;
  node: Table;
  updatedFields: String[];
  previousValues: TablePreviousValues;
}

export interface TableSubscriptionPayloadPromise
  extends Promise<TableSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TablePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TablePreviousValuesPromise>() => T;
}

export interface TableSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TableSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TableSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TablePreviousValuesSubscription>() => T;
}

export interface TablePreviousValues {
  id: ID_Output;
}

export interface TablePreviousValuesPromise
  extends Promise<TablePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface TablePreviousValuesSubscription
  extends Promise<AsyncIterator<TablePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name?: String;
  password: String;
  permissions: Permission;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  permissions: () => Promise<Permission>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Organization",
    embedded: false
  },
  {
    name: "Menu",
    embedded: false
  },
  {
    name: "MenuItem",
    embedded: false
  },
  {
    name: "MenuChoice",
    embedded: false
  },
  {
    name: "MenuSelection",
    embedded: false
  },
  {
    name: "MenuHeader",
    embedded: false
  },
  {
    name: "Table",
    embedded: false
  },
  {
    name: "Cart",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "OrderItem",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
